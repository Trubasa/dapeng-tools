<output>
<message><![CDATA[## 问题分析

需要对 BannerTable 和 Table 组件进行重构，使用 Vue 的插槽系统来提高组件的灵活性：

1. 对于 Table 组件，我们需要提供具名插槽，让使用者可以自定义表头和表格内容。
2. 对于 BannerTable，需要利用 Table 组件的插槽系统来渲染 Banner 相关内容。

这种重构可以提高代码的灵活性、复用性和可维护性。下面是实现方案：]]></message>
<files>
<file>
<filename>src\components\ui\Table.vue</filename>
<content><![CDATA[<template>
  <div class="overflow-x-auto">
    <table class="min-w-full divide-y divide-gray-200">
      <thead class="bg-gray-50">
        <tr>
          <th v-if="showSelection" scope="col" class="px-6 py-3 w-12">
            <input
              type="checkbox"
              class="h-4 w-4 text-blue-600 rounded"
              :checked="allSelected"
              @change="handleSelectAll"
            />
          </th>
          <!-- 使用具名插槽渲染表头 -->
          <slot name="header" :columns="columns">
            <th
              v-for="(column, index) in columns"
              :key="index"
              scope="col"
              :class="[
                'px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider',
                column.width ? column.width : ''
              ]"
            >
              {{ column.header }}
            </th>
          </slot>
        </tr>
      </thead>
      <tbody class="bg-white divide-y divide-gray-200">
        <!-- 使用具名插槽渲染表格内容 -->
        <slot name="body" :data="data" :is-selected="isSelected" :handle-row-click="handleRowClick">
          <tr
            v-for="(item, rowIndex) in data"
            :key="item[keyField] || rowIndex"
            @click="handleRowClick(item)"
            :class="[
              onRowClick ? 'cursor-pointer hover:bg-gray-50' : '',
              isSelected(item) ? 'bg-blue-50' : ''
            ]"
          >
            <td v-if="showSelection" class="px-6 py-4 whitespace-nowrap w-12">
              <input
                type="checkbox"
                class="h-4 w-4 text-blue-600 rounded"
                :checked="isSelected(item)"
                @change.stop="handleSelectRow(item[keyField] as number)"
                @click.stop 
              />
            </td>
            <td
              v-for="(column, colIndex) in columns"
              :key="colIndex"
              class="px-6 py-4 whitespace-nowrap"
            >
              <div class="text-sm text-gray-900">
                <!-- 使用插槽渲染每一列的内容 -->
                <slot :name="`cell-${column.accessor}`" :item="item" :column="column">
                  <template v-if="typeof column.accessor === 'function'">
                    <component :is="column.accessor(item)" v-if="isVueComponent(column.accessor(item))" />
                    <div v-else v-html="renderAccessor(column.accessor(item))"></div>
                  </template>
                  <template v-else>
                    {{ item[column.accessor as keyof typeof item] }}
                  </template>
                </slot>
              </div>
            </td>
          </tr>
        </slot>
      </tbody>
    </table>
  </div>
</template>

<script setup lang="ts" generic="T extends { id: number }">
import { computed, h, type VNode } from 'vue'

interface Column<TItem> {
  header: string
  accessor: keyof TItem | ((data: TItem) => VNode | string | number | HTMLElement | any)
  width?: string
}

interface TableProps<TItem extends { id: number }> {
  columns: Column<TItem>[]
  data: TItem[]
  onRowClick?: (item: TItem) => void
  selectedRows?: number[]
  onSelectRow?: (id: number) => void
  onSelectAll?: () => void
  allSelected?: boolean
  keyField?: keyof TItem
}

const props = withDefaults(defineProps<TableProps<T>>(), {
  selectedRows: () => [],
  allSelected: false,
  keyField: 'id' as keyof T
})

const emit = defineEmits(['update:selectedRows', 'update:allSelected', 'rowClick', 'selectRow', 'selectAll'])

const showSelection = computed(() => props.onSelectRow !== undefined)

const isSelected = (item: T): boolean => {
  return props.selectedRows.includes(item[props.keyField] as unknown as number)
}

const handleRowClick = (item: T) => {
  if (props.onRowClick) {
    props.onRowClick(item)
  }
  emit('rowClick', item)
}

const handleSelectRow = (id: number) => {
  if (props.onSelectRow) {
    props.onSelectRow(id)
  }
  emit('selectRow', id)
}

const handleSelectAll = () => {
  if (props.onSelectAll) {
    props.onSelectAll()
  }
  emit('selectAll')
}

// 检查是否是 Vue 组件实例或 VNode
const isVueComponent = (value: any): value is VNode => {
  return value && (typeof value === 'object' && ('type' in value || 'tag' in value || 'component' in value));
}

// 辅助函数，渲染访问器内容
const renderAccessor = (value: any) => {
  if (value instanceof HTMLElement) {
    return value.outerHTML;
  }
  return value;
}
</script>
]]></content>
</file>
<file>
<filename>src\components\banner\BannerTable.vue</filename>
<content><![CDATA[<template>
  <TableComponent :columns="columns" :data="banners" key-field="id">
    <!-- 使用具名插槽自定义表格内容 -->
    <template #body="{ data, isSelected, handleRowClick }">
      <tr 
        v-for="banner in data" 
        :key="banner.id"
        :class="[isSelected(banner) ? 'bg-blue-50' : '', 'hover:bg-gray-50']"
        @click="handleRowClick(banner)"
      >
        <!-- 图片列 -->
        <td class="px-6 py-4 whitespace-nowrap w-1/6">
          <div class="w-24 h-16 bg-gray-100 rounded overflow-hidden">
            <img
              :src="banner.image"
              alt="Banner"
              class="w-full h-full object-cover"
            />
          </div>
        </td>
        
        <!-- 跳转类型列 -->
        <td class="px-6 py-4 whitespace-nowrap w-1/6">
          {{ getLinkTypeText(banner.linkType) }}
        </td>
        
        <!-- 权重列 -->
        <td class="px-6 py-4 whitespace-nowrap w-1/12">
          {{ banner.weight }}
        </td>
        
        <!-- 展示时间列 -->
        <td class="px-6 py-4 whitespace-nowrap w-1/4">
          <div class="text-sm">{{ banner.startTime.replace("T", " ") }}</div>
          <div class="text-sm text-gray-500">{{ banner.endTime.replace("T", " ") }}</div>
        </td>
        
        <!-- 数据统计列 -->
        <td class="px-6 py-4 whitespace-nowrap w-1/4">
          <div class="text-sm">浏览量：{{ banner.views }}</div>
          <div class="text-sm">点击率：{{ banner.ctr }}</div>
        </td>
        
        <!-- 操作列 -->
        <td class="px-6 py-4 whitespace-nowrap w-1/6">
          <div class="flex items-center space-x-2">
            <Button
              variant="outline"
              size="sm"
              :icon="EditIcon"
              @click.stop="emit('edit-banner', banner)"
            >
              编辑
            </Button>
            <Button
              variant="danger"
              size="sm"
              :icon="TrashIcon"
              @click.stop="emit('delete-banner', banner)"
            >
              删除
            </Button>
          </div>
        </td>
      </tr>
    </template>
    
    <!-- 自定义表头 -->
    <template #header>
      <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/6">
        图片
      </th>
      <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/6">
        跳转类型
      </th>
      <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/12">
        权重
      </th>
      <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/4">
        展示时间
      </th>
      <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/4">
        数据统计
      </th>
      <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/6">
        操作
      </th>
    </template>
  </TableComponent>
</template>

<script setup lang="ts">
import { computed } from "vue";
import TableComponent from "@/components/ui/Table.vue";
import Button from "@/components/ui/Button.vue";
import { EditIcon, TrashIcon } from "lucide-vue-next";

interface Banner {
  id: number;
  image: string;
  linkType: "none" | "url" | "activity";
  link: string | null;
  activityId: number | null;
  weight: number;
  startTime: string;
  endTime: string;
  views: number;
  clicks: number;
  ctr: string;
  type: string;
}

interface Props {
  banners: Banner[];
}

const props = defineProps<Props>();
const emit = defineEmits(["edit-banner", "delete-banner"]);

// 保留列定义用于类型提示和其他可能的功能
const columns = computed(() => [
  { header: "图片", accessor: "image", width: "w-1/6" },
  { header: "跳转类型", accessor: "linkType", width: "w-1/6" },
  { header: "权重", accessor: "weight", width: "w-1/12" },
  { header: "展示时间", accessor: "startTime", width: "w-1/4" },
  { header: "数据统计", accessor: "views", width: "w-1/4" },
  { header: "操作", accessor: "id", width: "w-1/6" },
]);

// 辅助函数：获取跳转类型的文字描述
const getLinkTypeText = (linkType: Banner["linkType"]) => {
  const linkTypeMap = {
    none: "无跳转",
    url: "链接跳转", 
    activity: "关联活动"
  };
  return linkTypeMap[linkType] || linkType;
};
</script>
]]></content>
</file>
</files>
</output>