text = r"""
# 代码文档: g136后台

## 目录

- [README.md](#READMEmd)
- [index.html](#indexhtml)
- [package.json](#packagejson)
- [postcss.config.js](#postcssconfigjs)
- [src\App.tsx](#src\Apptsx)
- [src\components\layout\Header.tsx](#src\components\layout\Headertsx)
- [src\components\layout\Layout.tsx](#src\components\layout\Layouttsx)
- [src\components\layout\Sidebar.tsx](#src\components\layout\Sidebartsx)
- [src\components\message\MessageSettings.tsx](#src\components\message\MessageSettingstsx)
- [src\components\message\MessageTemplateSelector.tsx](#src\components\message\MessageTemplateSelectortsx)
- [src\components\ui\Button.tsx](#src\components\ui\Buttontsx)
- [src\components\ui\Card.tsx](#src\components\ui\Cardtsx)
- [src\components\ui\Modal.tsx](#src\components\ui\Modaltsx)
- [src\components\ui\Table.tsx](#src\components\ui\Tabletsx)
- [src\index.css](#src\indexcss)
- [src\index.tsx](#src\indextsx)
- [src\pages\AccountManagement.tsx](#src\pages\AccountManagementtsx)
- [src\pages\ActivityManagement.tsx](#src\pages\ActivityManagementtsx)
- [src\pages\ArticleEditor.tsx](#src\pages\ArticleEditortsx)
- [src\pages\BannerManagement.tsx](#src\pages\BannerManagementtsx)
- [src\pages\ContentDashboard.tsx](#src\pages\ContentDashboardtsx)
- [src\pages\ContentEditor.tsx](#src\pages\ContentEditortsx)
- [src\pages\DailySignIn.tsx](#src\pages\DailySignIntsx)
- [src\pages\Dashboard.tsx](#src\pages\Dashboardtsx)
- [src\pages\MessageFactory.tsx](#src\pages\MessageFactorytsx)
- [src\pages\Permissions.tsx](#src\pages\Permissionstsx)
- [src\pages\TagManagement.tsx](#src\pages\TagManagementtsx)
- [src\pages\VideoPublisher.tsx](#src\pages\VideoPublishertsx)
- [tailwind.config.js](#tailwindconfigjs)
- [tsconfig.json](#tsconfigjson)
- [tsconfig.node.json](#tsconfignodejson)
- [vite.config.ts](#viteconfigts)


### README.md
```markdown
# Magic Patterns - Vite Template

This code was generated by [Magic Patterns](https://magicpatterns.com) for this design: [Source Design](https://magicpatterns.com/c/gohwncshqq6fcquntena3j)

## Getting Started

1. Run `npm install`
2. Run `npm run dev`

```

### index.html
```html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/index.tsx"></script>
  </body>
</html>

```

### package.json
```json
{
  "name": "magic-patterns-vite-template",
  "version": "0.0.1",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "npx vite",
    "build": "npx vite build",
    "lint": "eslint . --ext .js,.jsx,.ts,.tsx",
    "preview": "npx vite preview"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "lucide-react": "^0.441.0",
    "date-fns": "^4.0.0",
    "react-router-dom": "^6.26.2"
  },
  "devDependencies": {
    "@types/node": "^20.11.18",
    "@types/react": "^18.3.1",
    "@types/react-dom": "^18.3.1",
    "@typescript-eslint/eslint-plugin": "^5.54.0",
    "@typescript-eslint/parser": "^5.54.0",
    "@vitejs/plugin-react": "^4.2.1",
    "eslint": "^8.50.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.1",
    "typescript": "^5.5.4",
    "vite": "^5.2.0",
    "tailwindcss": "3.4.17",
    "autoprefixer": "latest",
    "postcss": "latest"
  }
}
```

### postcss.config.js
```javascript
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

```

### src\App.tsx
```tsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import Layout from './components/layout/Layout';
import Dashboard from './pages/Dashboard';
import Permissions from './pages/Permissions';
import DailySignIn from './pages/DailySignIn';
import BannerManagement from './pages/BannerManagement';
import ActivityManagement from './pages/ActivityManagement';
import TagManagement from './pages/TagManagement';
import ContentDashboard from './pages/ContentDashboard';
import ArticleEditor from './pages/ArticleEditor';
import VideoPublisher from './pages/VideoPublisher';
import MessageFactory from './pages/MessageFactory';
import AccountManagement from './pages/AccountManagement';
export function App() {
  return <Router>
      <Layout>
        <Routes>
          <Route path="/" element={<Navigate to="/dashboard" replace />} />
          <Route path="/dashboard" element={<Dashboard />} />
          <Route path="/permissions" element={<Permissions />} />
          <Route path="/daily-sign-in" element={<DailySignIn />} />
          <Route path="/banner-management" element={<BannerManagement />} />
          <Route path="/activity-management" element={<ActivityManagement />} />
          <Route path="/tag-management" element={<TagManagement />} />
          <Route path="/content-dashboard" element={<ContentDashboard />} />
          <Route path="/content-dashboard/article/new" element={<ArticleEditor />} />
          <Route path="/content-dashboard/article/:id" element={<ArticleEditor />} />
          <Route path="/content-dashboard/video/new" element={<VideoPublisher />} />
          <Route path="/content-dashboard/video/:id" element={<VideoPublisher />} />
          <Route path="/message-factory" element={<MessageFactory />} />
          <Route path="/account-management" element={<AccountManagement />} />
        </Routes>
      </Layout>
    </Router>;
}
```

### src\components\layout\Header.tsx
```tsx
import React from 'react';
import { BellIcon, UserIcon, SearchIcon } from 'lucide-react';
const Header: React.FC = () => {
  return <header className="bg-white border-b border-gray-200 py-4 px-6 flex items-center justify-between">
      <div className="flex items-center rounded-md bg-gray-100 px-3 py-2 w-72">
        <SearchIcon className="h-4 w-4 text-gray-500 mr-2" />
        <input type="text" placeholder="搜索..." className="bg-transparent border-none outline-none text-sm w-full" />
      </div>
      <div className="flex items-center space-x-4">
        <button className="text-gray-500 hover:text-gray-700">
          <BellIcon className="h-5 w-5" />
        </button>
        <div className="flex items-center">
          <div className="h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center text-white">
            <UserIcon className="h-5 w-5" />
          </div>
          <span className="ml-2 text-sm font-medium">管理员</span>
        </div>
      </div>
    </header>;
};
export default Header;
```

### src\components\layout\Layout.tsx
```tsx
import React from 'react';
import Sidebar from './Sidebar';
import Header from './Header';
interface LayoutProps {
  children: React.ReactNode;
}
const Layout: React.FC<LayoutProps> = ({
  children
}) => {
  return <div className="flex h-screen bg-gray-100">
      <Sidebar />
      <div className="flex flex-col flex-1 overflow-hidden">
        <Header />
        <main className="flex-1 overflow-y-auto p-6">{children}</main>
      </div>
    </div>;
};
export default Layout;
```

### src\components\layout\Sidebar.tsx
```tsx
import React, { useState } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { UsersIcon, LayoutDashboardIcon, CalendarIcon, ImageIcon, ZapIcon, TagIcon, FileTextIcon, VideoIcon, UserIcon, BarChart2Icon, BellIcon, ActivityIcon, ChevronDownIcon } from 'lucide-react';
interface NavItemProps {
  to: string;
  icon: React.ReactNode;
  label: string;
  isActive: boolean;
}
const NavItem: React.FC<NavItemProps> = ({
  to,
  icon,
  label,
  isActive
}) => {
  return <Link to={to} className={`flex items-center px-4 py-3 text-sm rounded-lg mb-1 ${isActive ? 'bg-blue-100 text-blue-800' : 'text-gray-700 hover:bg-gray-100'}`}>
      <span className="mr-3">{icon}</span>
      <span>{label}</span>
    </Link>;
};
interface NavGroupProps {
  title: string;
  children: React.ReactNode;
}
const NavGroup: React.FC<NavGroupProps> = ({
  title,
  children
}) => {
  const [isOpen, setIsOpen] = useState(true);
  return <div className="mb-4">
      <button className="flex items-center justify-between w-full px-4 py-2 text-sm font-medium text-gray-500" onClick={() => setIsOpen(!isOpen)}>
        <span>{title}</span>
        <ChevronDownIcon className={`h-4 w-4 transition-transform ${isOpen ? 'transform rotate-180' : ''}`} />
      </button>
      {isOpen && <div className="mt-1">{children}</div>}
    </div>;
};
const Sidebar: React.FC = () => {
  const location = useLocation();
  const currentPath = location.pathname;
  return <div className="w-64 bg-white border-r border-gray-200 flex-shrink-0 overflow-y-auto">
      <div className="p-5">
        <h1 className="text-xl font-bold text-gray-800">游戏小程序后台</h1>
      </div>
      <nav className="px-3 py-2">
        <NavItem to="/dashboard" icon={<LayoutDashboardIcon className="h-5 w-5" />} label="仪表盘" isActive={currentPath === '/dashboard'} />
        <NavGroup title="基础配置">
          <NavItem to="/permissions" icon={<UsersIcon className="h-5 w-5" />} label="权限管理" isActive={currentPath === '/permissions'} />
        </NavGroup>
        <NavGroup title="页面管理">
          <NavItem to="/daily-sign-in" icon={<CalendarIcon className="h-5 w-5" />} label="每日签到管理" isActive={currentPath === '/daily-sign-in'} />
          <NavItem to="/banner-management" icon={<ImageIcon className="h-5 w-5" />} label="Banner管理" isActive={currentPath === '/banner-management'} />
        </NavGroup>
        <NavGroup title="活动运营">
          <NavItem to="/activity-management" icon={<ZapIcon className="h-5 w-5" />} label="最新活动管理" isActive={currentPath === '/activity-management'} />
        </NavGroup>
        <NavGroup title="攻略生态">
          <NavItem to="/tag-management" icon={<TagIcon className="h-5 w-5" />} label="标签管理" isActive={currentPath === '/tag-management'} />
          <NavItem to="/content-dashboard" icon={<BarChart2Icon className="h-5 w-5" />} label="内容管理" isActive={currentPath === '/content-dashboard'} />
          <NavItem to="/account-management" icon={<UserIcon className="h-5 w-5" />} label="官方账号管理" isActive={currentPath === '/account-management'} />
        </NavGroup>
        <NavGroup title="消息触达">
          <NavItem to="/message-factory" icon={<BellIcon className="h-5 w-5" />} label="订阅消息工厂" isActive={currentPath === '/message-factory'} />
        </NavGroup>
      </nav>
    </div>;
};
export default Sidebar;
```

### src\components\message\MessageSettings.tsx
```tsx
import React, { useState } from 'react';
import Card from '../ui/Card';
import Button from '../ui/Button';
import MessageTemplateSelector from './MessageTemplateSelector';
import { BellIcon, ClockIcon } from 'lucide-react';
interface Template {
  id: number;
  name: string;
  category: string;
  content: string;
  example: string;
}
interface MessageSettingsProps {
  moduleType: 'activity' | 'content' | 'sign_in';
  title: string;
}
const MessageSettings: React.FC<MessageSettingsProps> = ({
  moduleType,
  title
}) => {
  const [selectedTemplate, setSelectedTemplate] = useState<Template | null>(null);
  const [isEnabled, setIsEnabled] = useState(false);
  const [timing, setTiming] = useState<'immediate' | 'scheduled'>('immediate');
  const [scheduledTime, setScheduledTime] = useState('');
  const showTimingSection = moduleType !== 'activity';
  return <Card title={title}>
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <BellIcon className="h-5 w-5 text-gray-500" />
            <span className="text-sm font-medium text-gray-700">
              启用消息推送
            </span>
          </div>
          <label className="relative inline-flex items-center cursor-pointer">
            <input type="checkbox" className="sr-only peer" checked={isEnabled} onChange={e => setIsEnabled(e.target.checked)} />
            <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
          </label>
        </div>
        {isEnabled && <>
            <div className="border-t pt-4">
              <MessageTemplateSelector moduleType={moduleType} onSelect={template => setSelectedTemplate(template)} selectedTemplate={selectedTemplate || undefined} />
            </div>
            {showTimingSection && <div className="border-t pt-4">
                <div className="space-y-3">
                  <div className="flex items-center space-x-2">
                    <ClockIcon className="h-5 w-5 text-gray-500" />
                    <span className="text-sm font-medium text-gray-700">
                      发送时间
                    </span>
                  </div>
                  <div className="flex space-x-4">
                    <label className="flex items-center">
                      <input type="radio" className="h-4 w-4 text-blue-600" checked={timing === 'immediate'} onChange={() => setTiming('immediate')} />
                      <span className="ml-2 text-sm text-gray-700">
                        立即发送
                      </span>
                    </label>
                    <label className="flex items-center">
                      <input type="radio" className="h-4 w-4 text-blue-600" checked={timing === 'scheduled'} onChange={() => setTiming('scheduled')} />
                      <span className="ml-2 text-sm text-gray-700">
                        定时发送
                      </span>
                    </label>
                  </div>
                  {timing === 'scheduled' && <input type="datetime-local" className="px-3 py-2 border rounded-md" value={scheduledTime} onChange={e => setScheduledTime(e.target.value)} />}
                </div>
              </div>}
          </>}
      </div>
    </Card>;
};
export default MessageSettings;
```

### src\components\message\MessageTemplateSelector.tsx
```tsx
import React, { useState } from 'react';
import Button from '../ui/Button';
import Modal from '../ui/Modal';
import { SearchIcon, PlusIcon } from 'lucide-react';
interface Template {
  id: number;
  name: string;
  category: string;
  content: string;
  example: string;
}
interface MessageTemplateSelectorProps {
  moduleType: 'activity' | 'content' | 'sign_in';
  onSelect: (template: Template) => void;
  selectedTemplate?: Template;
}
const mockTemplates: Template[] = [{
  id: 1,
  name: '活动开始提醒',
  category: 'activity',
  content: '亲爱的${user}，${activityName}活动即将开始，记得来参加哦！',
  example: '亲爱的玩家，新春活动即将开始，记得来参加哦！'
}, {
  id: 2,
  name: '每日签到提醒',
  category: 'sign_in',
  content: '亲爱的${user}，今日签到奖励${reward}等你来领取！',
  example: '亲爱的玩家，今日签到奖励100金币等你来领取！'
}, {
  id: 3,
  name: '内容更新提醒',
  category: 'content',
  content: '${title}已更新，快来查看最新内容吧！',
  example: '每周攻略已更新，快来查看最新内容吧！'
}];
const MessageTemplateSelector: React.FC<MessageTemplateSelectorProps> = ({
  moduleType,
  onSelect,
  selectedTemplate
}) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const filteredTemplates = mockTemplates.filter(template => template.category === moduleType && template.name.toLowerCase().includes(searchQuery.toLowerCase()));
  return <div>
      <div className="flex items-center justify-between">
        <div className="flex-1">
          {selectedTemplate ? <div className="p-3 border rounded-lg">
              <div className="font-medium text-gray-700">
                {selectedTemplate.name}
              </div>
              <div className="text-sm text-gray-500 mt-1">
                {selectedTemplate.example}
              </div>
            </div> : <Button variant="outline" onClick={() => setIsModalOpen(true)} icon={<PlusIcon className="h-4 w-4" />}>
              选择订阅消息
            </Button>}
        </div>
        {selectedTemplate && <Button variant="outline" className="ml-2" onClick={() => setIsModalOpen(true)}>
            更换订阅消息
          </Button>}
      </div>
      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} title="选择订阅消息">
        <div className="space-y-4">
          <div className="relative">
            <input type="text" className="w-full pl-10 pr-4 py-2 border rounded-lg" placeholder="搜索模板..." value={searchQuery} onChange={e => setSearchQuery(e.target.value)} />
            <SearchIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
          </div>
          <div className="space-y-3 max-h-[400px] overflow-y-auto">
            {filteredTemplates.map(template => <div key={template.id} className="p-3 border rounded-lg cursor-pointer hover:border-blue-500" onClick={() => {
            onSelect(template);
            setIsModalOpen(false);
          }}>
                <div className="font-medium text-gray-700">{template.name}</div>
                <div className="text-sm text-gray-500 mt-1">
                  {template.example}
                </div>
              </div>)}
          </div>
        </div>
      </Modal>
    </div>;
};
export default MessageTemplateSelector;
```

### src\components\ui\Button.tsx
```tsx
import React from 'react';
interface ButtonProps {
  children: React.ReactNode;
  variant?: 'primary' | 'secondary' | 'danger' | 'outline';
  size?: 'sm' | 'md' | 'lg';
  onClick?: () => void;
  className?: string;
  disabled?: boolean;
  type?: 'button' | 'submit' | 'reset';
  icon?: React.ReactNode;
}
const Button: React.FC<ButtonProps> = ({
  children,
  variant = 'primary',
  size = 'md',
  onClick,
  className = '',
  disabled = false,
  type = 'button',
  icon
}) => {
  const baseClasses = 'inline-flex items-center justify-center font-medium rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2';
  const variantClasses = {
    primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',
    secondary: 'bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500',
    danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',
    outline: 'border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 focus:ring-blue-500'
  };
  const sizeClasses = {
    sm: 'text-xs px-2.5 py-1.5',
    md: 'text-sm px-4 py-2',
    lg: 'text-base px-6 py-3'
  };
  const disabledClasses = disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer';
  const classes = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${disabledClasses} ${className}`;
  return <button type={type} className={classes} onClick={onClick} disabled={disabled}>
      {icon && <span className="mr-2">{icon}</span>}
      {children}
    </button>;
};
export default Button;
```

### src\components\ui\Card.tsx
```tsx
import React from 'react';
interface CardProps {
  title?: string;
  children: React.ReactNode;
  className?: string;
}
const Card: React.FC<CardProps> = ({
  title,
  children,
  className = ''
}) => {
  return <div className={`bg-white rounded-lg shadow-sm border border-gray-200 ${className}`}>
      {title && <div className="px-6 py-4 border-b border-gray-200">
          <h3 className="text-lg font-medium text-gray-800">{title}</h3>
        </div>}
      <div className="p-6">{children}</div>
    </div>;
};
export default Card;
```

### src\components\ui\Modal.tsx
```tsx
import React from 'react';
import { XIcon } from 'lucide-react';
import Button from './Button';
interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  children: React.ReactNode;
  footer?: React.ReactNode;
}
const Modal: React.FC<ModalProps> = ({
  isOpen,
  onClose,
  title,
  children,
  footer
}) => {
  if (!isOpen) return null;
  return <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex min-h-screen items-end justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0">
        <div className="fixed inset-0 transition-opacity" onClick={onClose}>
          <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
        </div>
        <span className="hidden sm:inline-block sm:h-screen sm:align-middle">
          &#8203;
        </span>
        <div className="inline-block transform overflow-hidden rounded-lg bg-white text-left align-bottom shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:align-middle">
          <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            <div className="flex items-start justify-between">
              <h3 className="text-lg font-medium leading-6 text-gray-900">
                {title}
              </h3>
              <button onClick={onClose} className="ml-auto flex h-7 w-7 items-center justify-center rounded-full text-gray-400 hover:bg-gray-100 hover:text-gray-500">
                <XIcon className="h-5 w-5" />
              </button>
            </div>
            <div className="mt-3">{children}</div>
          </div>
          {footer && <div className="bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">
              {footer}
            </div>}
        </div>
      </div>
    </div>;
};
export default Modal;
```

### src\components\ui\Table.tsx
```tsx
import React from 'react';
interface Column<T> {
  header: string;
  accessor: keyof T | ((data: T) => React.ReactNode);
  width?: string;
}
interface TableProps<T> {
  columns: Column<T>[];
  data: T[];
  onRowClick?: (item: T) => void;
  selectedRows?: number[];
  onSelectRow?: (id: number) => void;
  onSelectAll?: () => void;
  allSelected?: boolean;
  keyField?: keyof T;
}
function Table<T extends {
  id: number;
}>({
  columns,
  data,
  onRowClick,
  selectedRows = [],
  onSelectRow,
  onSelectAll,
  allSelected = false,
  keyField = 'id' as keyof T
}: TableProps<T>): JSX.Element {
  const showSelection = onSelectRow !== undefined;
  return <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            {showSelection && <th scope="col" className="px-6 py-3 w-12">
                <input type="checkbox" className="h-4 w-4 text-blue-600 rounded" checked={allSelected} onChange={onSelectAll} />
              </th>}
            {columns.map((column, index) => <th key={index} scope="col" className={`px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider ${column.width ? column.width : ''}`}>
                {column.header}
              </th>)}
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item, rowIndex) => {
          const isSelected = selectedRows.includes(item[keyField] as unknown as number);
          return <tr key={rowIndex} onClick={() => onRowClick && onRowClick(item)} className={`${onRowClick ? 'cursor-pointer hover:bg-gray-50' : ''} ${isSelected ? 'bg-blue-50' : ''}`}>
                {showSelection && <td className="px-6 py-4 whitespace-nowrap w-12">
                    <input type="checkbox" className="h-4 w-4 text-blue-600 rounded" checked={isSelected} onChange={e => {
                e.stopPropagation();
                onSelectRow && onSelectRow(item[keyField] as unknown as number);
              }} />
                  </td>}
                {columns.map((column, colIndex) => <td key={colIndex} className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900">
                      {typeof column.accessor === 'function' ? column.accessor(item) : item[column.accessor] as unknown as React.ReactNode}
                    </div>
                  </td>)}
              </tr>;
        })}
        </tbody>
      </table>
    </div>;
}
export default Table;
```

### src\index.css
```css
@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';
```

### src\index.tsx
```tsx
import './index.css';
import React from "react";
import { render } from "react-dom";
import { App } from "./App";
render(<App />, document.getElementById("root"));
```

### src\pages\AccountManagement.tsx
```tsx
import React, { useState } from 'react';
import Card from '../components/ui/Card';
import Button from '../components/ui/Button';
import Modal from '../components/ui/Modal';
import { PlusIcon, TrashIcon, ImageIcon, AlertCircleIcon } from 'lucide-react';
interface Account {
  id: number;
  name: string;
  avatar: string;
}
const mockAccounts: Account[] = [{
  id: 1,
  name: '灵兽官方账号',
  avatar: 'https://placehold.co/100x100'
}, {
  id: 2,
  name: '灵兽活动发布',
  avatar: 'https://placehold.co/100x100'
}, {
  id: 3,
  name: '灵兽攻略站',
  avatar: 'https://placehold.co/100x100'
}];
interface AccountFormData {
  name: string;
  avatar: string;
}
const AccountManagement: React.FC = () => {
  const [accounts, setAccounts] = useState<Account[]>(mockAccounts);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [accountToDelete, setAccountToDelete] = useState<Account | null>(null);
  const [formData, setFormData] = useState<AccountFormData>({
    name: '',
    avatar: 'https://placehold.co/100x100'
  });
  const [formError, setFormError] = useState('');
  const handleAddAccount = () => {
    if (!formData.name.trim()) {
      setFormError('请输入账号名称');
      return;
    }
    if (accounts.some(account => account.name === formData.name.trim())) {
      setFormError('账号名称已存在');
      return;
    }
    const newAccount: Account = {
      id: Math.max(...accounts.map(a => a.id)) + 1,
      name: formData.name.trim(),
      avatar: formData.avatar
    };
    setAccounts([...accounts, newAccount]);
    setFormData({
      name: '',
      avatar: 'https://placehold.co/100x100'
    });
    setFormError('');
    setIsAddModalOpen(false);
  };
  const handleDeleteConfirm = () => {
    if (accountToDelete) {
      setAccounts(accounts.filter(account => account.id !== accountToDelete.id));
      setAccountToDelete(null);
      setIsDeleteModalOpen(false);
    }
  };
  const handleDeleteClick = (account: Account) => {
    setAccountToDelete(account);
    setIsDeleteModalOpen(true);
  };
  const handleUploadAvatar = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      if (file.size > 5 * 1024 * 1024) {
        setFormError('图片大小不能超过5MB');
        return;
      }
      const reader = new FileReader();
      reader.onload = e => {
        setFormData({
          ...formData,
          avatar: e.target?.result as string
        });
        setFormError('');
      };
      reader.readAsDataURL(file);
    }
  };
  const addModalFooter = <>
      <Button variant="primary" className="ml-3" onClick={handleAddAccount} disabled={!formData.name.trim()}>
        确认
      </Button>
      <Button variant="outline" onClick={() => {
      setIsAddModalOpen(false);
      setFormError('');
      setFormData({
        name: '',
        avatar: 'https://placehold.co/100x100'
      });
    }}>
        取消
      </Button>
    </>;
  const deleteModalFooter = <>
      <Button variant="danger" className="ml-3" onClick={handleDeleteConfirm}>
        确认删除
      </Button>
      <Button variant="outline" onClick={() => setIsDeleteModalOpen(false)}>
        取消
      </Button>
    </>;
  return <div>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-800">官方账号管理</h1>
        <Button variant="primary" icon={<PlusIcon className="h-4 w-4" />} onClick={() => setIsAddModalOpen(true)}>
          新增账号
        </Button>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {accounts.map(account => <Card key={account.id}>
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <div className="h-16 w-16 rounded-lg bg-gray-100 flex items-center justify-center overflow-hidden">
                  <img src={account.avatar} alt={account.name} className="w-full h-full object-cover" />
                </div>
                <div>
                  <h3 className="font-medium text-gray-900">{account.name}</h3>
                  <p className="text-sm text-gray-500">ID: {account.id}</p>
                </div>
              </div>
              <Button variant="danger" size="sm" icon={<TrashIcon className="h-4 w-4" />} onClick={() => handleDeleteClick(account)}>
                删除
              </Button>
            </div>
          </Card>)}
      </div>
      <Modal isOpen={isAddModalOpen} onClose={() => {
      setIsAddModalOpen(false);
      setFormError('');
      setFormData({
        name: '',
        avatar: 'https://placehold.co/100x100'
      });
    }} title="新增官方账号" footer={addModalFooter}>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              账号头像
            </label>
            <div className="flex items-center space-x-4">
              <div className="h-20 w-20 rounded-lg bg-gray-100 flex items-center justify-center overflow-hidden">
                <img src={formData.avatar} alt="Avatar preview" className="w-full h-full object-cover" />
              </div>
              <div>
                <input type="file" id="avatar-upload" className="hidden" accept="image/*" onChange={handleUploadAvatar} />
                <label htmlFor="avatar-upload">
                  <Button variant="outline" size="sm" icon={<ImageIcon className="h-4 w-4" />} type="button">
                    上传头像
                  </Button>
                </label>
                <p className="text-xs text-gray-500 mt-1">
                  支持 jpg、png 格式，大小 5MB 以内
                </p>
              </div>
            </div>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              账号名称
            </label>
            <input type="text" className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${formError ? 'border-red-500' : 'border-gray-300'}`} value={formData.name} onChange={e => {
            setFormData({
              ...formData,
              name: e.target.value
            });
            setFormError('');
          }} placeholder="请输入账号名称" />
            {formError && <div className="mt-1 text-sm text-red-500 flex items-center">
                <AlertCircleIcon className="h-4 w-4 mr-1" />
                {formError}
              </div>}
          </div>
        </div>
      </Modal>
      <Modal isOpen={isDeleteModalOpen} onClose={() => setIsDeleteModalOpen(false)} title="确认删除" footer={deleteModalFooter}>
        <div className="py-4">
          <p className="text-gray-700">
            确定要删除账号 "{accountToDelete?.name}" 吗？此操作无法撤销。
          </p>
        </div>
      </Modal>
    </div>;
};
export default AccountManagement;
```

### src\pages\ActivityManagement.tsx
```tsx
import React, { useState } from 'react';
import Card from '../components/ui/Card';
import Button from '../components/ui/Button';
import Modal from '../components/ui/Modal';
import MessageSettings from '../components/message/MessageSettings';
import { UserIcon, UsersIcon, TrendingUpIcon, EditIcon, ImageIcon } from 'lucide-react';
interface Activity {
  id: number;
  title: string;
  banner: string;
  description: string;
  startTime: string;
  endTime: string;
  status: 'upcoming' | 'active' | 'ended';
  participants: number;
  invitations: number;
  conversionRate: string;
}
interface ActivityFormData {
  title: string;
  description: string;
  startTime: string;
  endTime: string;
  banner: string;
}
const mockActivities: Activity[] = [{
  id: 1,
  title: '好友邀请活动',
  banner: 'https://placehold.co/1200x400',
  description: '邀请好友加入游戏，双方都可获得丰厚奖励！每成功邀请一位好友，即可获得100钻石和限定称号。',
  startTime: '2024-01-01 00:00:00',
  endTime: '2024-12-31 23:59:59',
  status: 'active',
  participants: 1234,
  invitations: 3456,
  conversionRate: '35.7%'
}];
const ActivityManagement: React.FC = () => {
  const [activities, setActivities] = useState<Activity[]>(mockActivities);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [editingActivity, setEditingActivity] = useState<Activity | null>(null);
  const [formData, setFormData] = useState<ActivityFormData>({
    title: '',
    description: '',
    startTime: '',
    endTime: '',
    banner: ''
  });
  const handleEditClick = (activity: Activity) => {
    setEditingActivity(activity);
    setFormData({
      title: activity.title,
      description: activity.description,
      startTime: activity.startTime,
      endTime: activity.endTime,
      banner: activity.banner
    });
    setIsEditModalOpen(true);
  };
  const handleSaveEdit = () => {
    if (editingActivity) {
      const updatedActivities = activities.map(activity => activity.id === editingActivity.id ? {
        ...activity,
        ...formData
      } : activity);
      setActivities(updatedActivities);
      setIsEditModalOpen(false);
    }
  };
  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const imageUrl = URL.createObjectURL(file);
      setFormData({
        ...formData,
        banner: imageUrl
      });
    }
  };
  const handleStatusChange = (activityId: number, newStatus: Activity['status']) => {
    const updatedActivities = activities.map(activity => activity.id === activityId ? {
      ...activity,
      status: newStatus
    } : activity);
    setActivities(updatedActivities);
  };
  const getStatusColor = (status: Activity['status']) => {
    switch (status) {
      case 'upcoming':
        return 'bg-blue-50 text-blue-600';
      case 'active':
        return 'bg-green-50 text-green-600';
      case 'ended':
        return 'bg-gray-50 text-gray-600';
    }
  };
  const getStatusText = (status: Activity['status']) => {
    switch (status) {
      case 'upcoming':
        return '未开始';
      case 'active':
        return '进行中';
      case 'ended':
        return '已结束';
    }
  };
  const modalFooter = <>
      <Button variant="primary" className="ml-3" onClick={handleSaveEdit}>
        保存
      </Button>
      <Button variant="outline" onClick={() => setIsEditModalOpen(false)}>
        取消
      </Button>
    </>;
  return <div>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-800">最新活动管理</h1>
      </div>
      {activities.map(activity => <div key={activity.id} className="space-y-6">
          <Card>
            <div className="space-y-6">
              <div className="aspect-[3/1] rounded-lg overflow-hidden bg-gray-100">
                <img src={activity.banner} alt={activity.title} className="w-full h-full object-cover" />
              </div>
              <div className="flex justify-between items-start">
                <div className="flex-1">
                  <div className="flex items-center space-x-2">
                    <h2 className="text-xl font-semibold text-gray-800">
                      {activity.title}
                    </h2>
                    <Button variant="outline" size="sm" icon={<EditIcon className="h-4 w-4" />} onClick={() => handleEditClick(activity)}>
                      编辑
                    </Button>
                  </div>
                  <p className="mt-1 text-gray-500">{activity.description}</p>
                </div>
                <div className="ml-4 flex items-center space-x-2">
                  <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(activity.status)}`}>
                    {getStatusText(activity.status)}
                  </span>
                  {activity.status === 'upcoming' && <Button variant="primary" size="sm" onClick={() => handleStatusChange(activity.id, 'active')}>
                      开始活动
                    </Button>}
                  {activity.status === 'active' && <Button variant="danger" size="sm" onClick={() => handleStatusChange(activity.id, 'ended')}>
                      结束活动
                    </Button>}
                </div>
              </div>
              <div className="border-t pt-6">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <Card className="bg-blue-50">
                    <div className="flex items-center">
                      <div className="p-3 bg-blue-100 rounded-lg">
                        <UsersIcon className="h-6 w-6 text-blue-600" />
                      </div>
                      <div className="ml-4">
                        <p className="text-sm text-blue-600">参与人数</p>
                        <p className="text-2xl font-semibold text-blue-900">
                          {activity.participants.toLocaleString()}
                        </p>
                      </div>
                    </div>
                  </Card>
                  <Card className="bg-green-50">
                    <div className="flex items-center">
                      <div className="p-3 bg-green-100 rounded-lg">
                        <UserIcon className="h-6 w-6 text-green-600" />
                      </div>
                      <div className="ml-4">
                        <p className="text-sm text-green-600">邀请人数</p>
                        <p className="text-2xl font-semibold text-green-900">
                          {activity.invitations.toLocaleString()}
                        </p>
                      </div>
                    </div>
                  </Card>
                  <Card className="bg-purple-50">
                    <div className="flex items-center">
                      <div className="p-3 bg-purple-100 rounded-lg">
                        <TrendingUpIcon className="h-6 w-6 text-purple-600" />
                      </div>
                      <div className="ml-4">
                        <p className="text-sm text-purple-600">转化率</p>
                        <p className="text-2xl font-semibold text-purple-900">
                          {activity.conversionRate}
                        </p>
                      </div>
                    </div>
                  </Card>
                </div>
              </div>
              <div className="border-t pt-4">
                <div className="text-sm text-gray-500">
                  活动时间：{activity.startTime} 至 {activity.endTime}
                </div>
              </div>
            </div>
          </Card>
          <MessageSettings moduleType="activity" title="活动消息设置" />
        </div>)}
      <Modal isOpen={isEditModalOpen} onClose={() => setIsEditModalOpen(false)} title="编辑活动" footer={modalFooter}>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              活动图片
            </label>
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-4">
              <div className="aspect-[3/1] rounded-lg overflow-hidden bg-gray-100">
                <img src={formData.banner} alt="Banner Preview" className="w-full h-full object-cover" />
              </div>
              <div className="mt-4 flex justify-center">
                <input type="file" id="banner-upload" className="hidden" accept="image/*" onChange={handleImageUpload} />
                <label htmlFor="banner-upload">
                  <Button variant="outline" size="sm" icon={<ImageIcon className="h-4 w-4" />} type="button">
                    更换图片
                  </Button>
                </label>
              </div>
            </div>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              活动名称
            </label>
            <input type="text" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" value={formData.title} onChange={e => setFormData({
            ...formData,
            title: e.target.value
          })} />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              活动描述
            </label>
            <textarea className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" rows={4} value={formData.description} onChange={e => setFormData({
            ...formData,
            description: e.target.value
          })} />
          </div>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                开始时间
              </label>
              <input type="datetime-local" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" value={formData.startTime.slice(0, 16)} onChange={e => setFormData({
              ...formData,
              startTime: e.target.value
            })} />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                结束时间
              </label>
              <input type="datetime-local" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" value={formData.endTime.slice(0, 16)} onChange={e => setFormData({
              ...formData,
              endTime: e.target.value
            })} />
            </div>
          </div>
        </div>
      </Modal>
    </div>;
};
export default ActivityManagement;
```

### src\pages\ArticleEditor.tsx
```tsx
import React, { useState } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import Card from '../components/ui/Card';
import Button from '../components/ui/Button';
import { BoldIcon, ItalicIcon, UnderlineIcon, ListIcon, ImageIcon, AlignLeftIcon, AlignCenterIcon, AlignRightIcon, Calendar, ClockIcon, ChevronLeftIcon, Type, ListOrdered, Palette } from 'lucide-react';
const ArticleEditor: React.FC = () => {
  const navigate = useNavigate();
  const {
    id
  } = useParams();
  const [title, setTitle] = useState('');
  const [scheduledPublish, setScheduledPublish] = useState(false);
  return <div>
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center">
          <Button variant="outline" size="sm" icon={<ChevronLeftIcon className="h-4 w-4" />} onClick={() => navigate('/content-dashboard')}>
            返回
          </Button>
          <h1 className="text-2xl font-bold text-gray-800 ml-4">
            {id ? '编辑文章' : '写文章'}
          </h1>
        </div>
        <div className="flex space-x-2">
          <Button variant="outline">保存草稿</Button>
          <Button variant="primary">发布文章</Button>
        </div>
      </div>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2">
          <Card>
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  文章标题
                </label>
                <input type="text" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="输入文章标题..." value={title} onChange={e => setTitle(e.target.value)} />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  文章内容
                </label>
                <div className="border border-gray-300 rounded-md overflow-hidden">
                  <div className="bg-gray-50 border-b border-gray-300 p-2">
                    <div className="flex items-center space-x-1">
                      <button className="p-1 hover:bg-gray-200 rounded">
                        <BoldIcon className="h-4 w-4" />
                      </button>
                      <button className="p-1 hover:bg-gray-200 rounded">
                        <Type className="h-4 w-4" />
                      </button>
                      <button className="p-1 hover:bg-gray-200 rounded">
                        <Palette className="h-4 w-4" />
                      </button>
                      <div className="h-4 border-r border-gray-300 mx-1" />
                      <button className="p-1 hover:bg-gray-200 rounded">
                        <ListIcon className="h-4 w-4" />
                      </button>
                      <button className="p-1 hover:bg-gray-200 rounded">
                        <ListOrdered className="h-4 w-4" />
                      </button>
                      <button className="p-1 hover:bg-gray-200 rounded">
                        <ImageIcon className="h-4 w-4" />
                      </button>
                      <div className="h-4 border-r border-gray-300 mx-1" />
                      <button className="p-1 hover:bg-gray-200 rounded">
                        <AlignLeftIcon className="h-4 w-4" />
                      </button>
                      <button className="p-1 hover:bg-gray-200 rounded">
                        <AlignCenterIcon className="h-4 w-4" />
                      </button>
                      <button className="p-1 hover:bg-gray-200 rounded">
                        <AlignRightIcon className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                  <textarea className="w-full p-3 min-h-[400px] focus:outline-none" placeholder="开始编写文章内容..." />
                </div>
              </div>
            </div>
          </Card>
        </div>
        <div className="space-y-6">
          <Card title="发布设置">
            <div className="space-y-4">
              <div>
                <label className="flex items-center">
                  <input type="checkbox" className="h-4 w-4 text-blue-600 rounded" checked={scheduledPublish} onChange={() => setScheduledPublish(!scheduledPublish)} />
                  <span className="ml-2 text-sm text-gray-700">定时发布</span>
                </label>
              </div>
              {scheduledPublish && <div className="grid grid-cols-2 gap-3">
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">
                      日期
                    </label>
                    <div className="relative">
                      <input type="date" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
                      <Calendar className="h-4 w-4 text-gray-400 absolute top-1/2 right-3 transform -translate-y-1/2" />
                    </div>
                  </div>
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">
                      时间
                    </label>
                    <div className="relative">
                      <input type="time" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
                      <ClockIcon className="h-4 w-4 text-gray-400 absolute top-1/2 right-3 transform -translate-y-1/2" />
                    </div>
                  </div>
                </div>}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  可见范围
                </label>
                <select className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                  <option value="public">公开</option>
                  <option value="private">仅自己可见</option>
                </select>
              </div>
            </div>
          </Card>
          <Card title="文章设置">
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  作者
                </label>
                <select className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                  <option value="official">灵兽官方账号</option>
                  <option value="activity">灵兽活动发布</option>
                  <option value="guide">灵兽攻略站</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  标签
                </label>
                <select className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 mb-2">
                  <option value="">选择一级标签</option>
                  <option value="1">萌新入门</option>
                  <option value="5">灵兽百科</option>
                  <option value="8">社交指南</option>
                  <option value="11">版本活动</option>
                </select>
                <select className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                  <option value="">选择二级标签</option>
                  <option value="2">快速升级</option>
                  <option value="3">赚钱秘籍</option>
                  <option value="4">伙伴养成</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  封面图
                </label>
                <div className="border-2 border-dashed border-gray-300 rounded-md p-6 flex flex-col items-center">
                  <ImageIcon className="h-8 w-8 text-gray-400 mb-2" />
                  <p className="text-sm text-gray-500 mb-1">点击上传封面图</p>
                  <p className="text-xs text-gray-400">或从文章首图自动提取</p>
                  <input type="file" className="hidden" />
                </div>
              </div>
            </div>
          </Card>
        </div>
      </div>
    </div>;
};
export default ArticleEditor;
```

### src\pages\BannerManagement.tsx
```tsx
import React, { useState } from 'react';
import Card from '../components/ui/Card';
import Button from '../components/ui/Button';
import Table from '../components/ui/Table';
import Modal from '../components/ui/Modal';
import { PlusIcon, LinkIcon, ZapIcon, ImageIcon, EditIcon, TrashIcon } from 'lucide-react';
interface Banner {
  id: number;
  image: string;
  linkType: 'none' | 'url' | 'activity';
  link: string | null;
  activityId: number | null;
  weight: number;
  startTime: string;
  endTime: string;
  views: number;
  clicks: number;
  ctr: string;
  type: 'home' | 'activity';
}
const mockBanners: Banner[] = [{
  id: 1,
  image: 'https://placehold.co/800x400',
  linkType: 'url',
  link: 'https://example.com/event1',
  activityId: null,
  weight: 100,
  startTime: '2024-01-01 00:00:00',
  endTime: '2024-12-31 23:59:59',
  views: 12500,
  clicks: 2800,
  ctr: '22.4%',
  type: 'home'
}, {
  id: 2,
  image: 'https://placehold.co/800x400',
  linkType: 'none',
  link: null,
  activityId: null,
  weight: 90,
  startTime: '2024-01-15 00:00:00',
  endTime: '2024-02-15 23:59:59',
  views: 8300,
  clicks: 0,
  ctr: '0%',
  type: 'home'
}, {
  id: 3,
  image: 'https://placehold.co/800x400',
  linkType: 'activity',
  link: null,
  activityId: 1,
  weight: 80,
  startTime: '2024-02-01 00:00:00',
  endTime: '2024-03-01 23:59:59',
  views: 15200,
  clicks: 4100,
  ctr: '27%',
  type: 'activity'
}];
interface TabProps {
  label: string;
  isActive: boolean;
  onClick: () => void;
}
const Tab: React.FC<TabProps> = ({
  label,
  isActive,
  onClick
}) => <button className={`px-4 py-2 font-medium text-sm rounded-lg ${isActive ? 'bg-blue-50 text-blue-600' : 'text-gray-500 hover:bg-gray-50'}`} onClick={onClick}>
    {label}
  </button>;
interface TabData {
  id: string;
  label: string;
  isDefault: boolean;
}
interface BannerFormData {
  image: string;
  linkType: 'none' | 'url' | 'activity';
  link: string;
  activityId: number | null;
  startTime: string;
  endTime: string;
  weight: number;
}
const BannerManagement: React.FC = () => {
  const [activeTab, setActiveTab] = useState('home');
  const [banners, setBanners] = useState<Banner[]>(mockBanners);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isAddTabModalOpen, setIsAddTabModalOpen] = useState(false);
  const [isEditTabModalOpen, setIsEditTabModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [bannerToDelete, setBannerToDelete] = useState<Banner | null>(null);
  const [isEditMode, setIsEditMode] = useState(false);
  const [tabs, setTabs] = useState<TabData[]>([{
    id: 'home',
    label: '首页Banner',
    isDefault: true
  }, {
    id: 'activity',
    label: '活动Banner',
    isDefault: true
  }]);
  const [newTabName, setNewTabName] = useState('');
  const [editingTab, setEditingTab] = useState<TabData | null>(null);
  const [bannerForm, setBannerForm] = useState<BannerFormData>({
    image: 'https://placehold.co/800x400',
    linkType: 'none',
    link: '',
    activityId: null,
    startTime: '',
    endTime: '',
    weight: 100
  });
  const columns = [{
    header: '图片',
    accessor: (banner: Banner) => <div className="w-24 h-16 bg-gray-100 rounded overflow-hidden">
          <img src={banner.image} alt="Banner" className="w-full h-full object-cover" />
        </div>,
    width: 'w-1/6'
  }, {
    header: '跳转类型',
    accessor: (banner: Banner) => {
      const types = {
        none: '无跳转',
        url: '链接跳转',
        activity: '关联活动'
      };
      return types[banner.linkType];
    },
    width: 'w-1/6'
  }, {
    header: '权重',
    accessor: 'weight',
    width: 'w-1/12'
  }, {
    header: '展示时间',
    accessor: (banner: Banner) => <div>
          <div className="text-sm">{banner.startTime}</div>
          <div className="text-sm text-gray-500">{banner.endTime}</div>
        </div>,
    width: 'w-1/4'
  }, {
    header: '数据统计',
    accessor: (banner: Banner) => <div>
          <div className="text-sm">浏览量：{banner.views}</div>
          <div className="text-sm">点击率：{banner.ctr}</div>
        </div>,
    width: 'w-1/4'
  }, {
    header: '操作',
    accessor: (banner: Banner) => <div className="flex items-center space-x-2">
          <Button variant="outline" size="sm" icon={<EditIcon className="h-4 w-4" />} onClick={e => {
        e.stopPropagation();
        handleEditClick(banner);
      }}>
            编辑
          </Button>
          <Button variant="danger" size="sm" icon={<TrashIcon className="h-4 w-4" />} onClick={e => {
        e.stopPropagation();
        handleDeleteClick(banner);
      }}>
            删除
          </Button>
        </div>,
    width: 'w-1/6'
  }];
  const handleAddBanner = () => {
    const newBanner: Banner = {
      id: Math.max(...banners.map(b => b.id)) + 1,
      ...bannerForm,
      views: 0,
      clicks: 0,
      ctr: '0%',
      type: activeTab
    };
    setBanners([...banners, newBanner]);
    setIsAddModalOpen(false);
    setBannerForm({
      image: 'https://placehold.co/800x400',
      linkType: 'none',
      link: '',
      activityId: null,
      startTime: '',
      endTime: '',
      weight: 100
    });
  };
  const handleAddTab = () => {
    if (newTabName.trim()) {
      const newTab: TabData = {
        id: `custom-${Date.now()}`,
        label: newTabName.trim(),
        isDefault: false
      };
      setTabs([...tabs, newTab]);
      setNewTabName('');
      setIsAddTabModalOpen(false);
    }
  };
  const handleEditTabName = () => {
    if (editingTab && newTabName.trim()) {
      setTabs(tabs.map(tab => tab.id === editingTab.id ? {
        ...tab,
        label: newTabName.trim()
      } : tab));
      setNewTabName('');
      setEditingTab(null);
      setIsEditTabModalOpen(false);
    }
  };
  const handleEditTabClick = (tab: TabData) => {
    setEditingTab(tab);
    setNewTabName(tab.label);
    setIsEditTabModalOpen(true);
  };
  const handleEditClick = (banner: Banner) => {
    setBannerForm({
      image: banner.image,
      linkType: banner.linkType,
      link: banner.link || '',
      activityId: banner.activityId,
      startTime: banner.startTime,
      endTime: banner.endTime,
      weight: banner.weight
    });
    setIsEditMode(true);
    setIsAddModalOpen(true);
  };
  const handleDeleteClick = (banner: Banner) => {
    setBannerToDelete(banner);
    setIsDeleteModalOpen(true);
  };
  const handleConfirmDelete = () => {
    if (bannerToDelete) {
      setBanners(banners.filter(b => b.id !== bannerToDelete.id));
      setBannerToDelete(null);
      setIsDeleteModalOpen(false);
    }
  };
  const handleSaveEdit = () => {
    if (bannerToDelete) {
      setBanners(banners.map(banner => banner.id === bannerToDelete.id ? {
        ...banner,
        ...bannerForm
      } : banner));
      setIsAddModalOpen(false);
      setIsEditMode(false);
      setBannerForm({
        image: 'https://placehold.co/800x400',
        linkType: 'none',
        link: '',
        activityId: null,
        startTime: '',
        endTime: '',
        weight: 100
      });
    }
  };
  const addTabModalFooter = <>
      <Button variant="primary" className="ml-3" onClick={handleAddTab} disabled={!newTabName.trim()}>
        确认
      </Button>
      <Button variant="outline" onClick={() => {
      setIsAddTabModalOpen(false);
      setNewTabName('');
    }}>
        取消
      </Button>
    </>;
  const editTabModalFooter = <>
      <Button variant="primary" className="ml-3" onClick={handleEditTabName} disabled={!newTabName.trim()}>
        确认
      </Button>
      <Button variant="outline" onClick={() => {
      setIsEditTabModalOpen(false);
      setNewTabName('');
      setEditingTab(null);
    }}>
        取消
      </Button>
    </>;
  const modalFooter = <>
      <Button variant="primary" className="ml-3" onClick={isEditMode ? handleSaveEdit : handleAddBanner}>
        {isEditMode ? '保存' : '确认'}
      </Button>
      <Button variant="outline" onClick={() => {
      setIsAddModalOpen(false);
      setIsEditMode(false);
      setBannerForm({
        image: 'https://placehold.co/800x400',
        linkType: 'none',
        link: '',
        activityId: null,
        startTime: '',
        endTime: '',
        weight: 100
      });
    }}>
        取消
      </Button>
    </>;
  return <div>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Banner管理</h1>
        <Button variant="primary" icon={<PlusIcon className="h-4 w-4" />} onClick={() => setIsAddModalOpen(true)}>
          新增Banner
        </Button>
      </div>
      <div className="mb-6">
        <div className="border-b border-gray-200">
          <div className="flex items-center space-x-2">
            {tabs.map(tab => <div key={tab.id} className="relative group" onMouseEnter={() => !tab.isDefault}>
                <button className={`px-4 py-2 font-medium text-sm rounded-lg ${activeTab === tab.id ? 'bg-blue-50 text-blue-600' : 'text-gray-500 hover:bg-gray-50'}`} onClick={() => setActiveTab(tab.id)}>
                  {tab.label}
                </button>
                {!tab.isDefault && <button className="absolute right-0 top-0 p-1 opacity-0 group-hover:opacity-100 transition-opacity" onClick={e => {
              e.stopPropagation();
              handleEditTabClick(tab);
            }}>
                    <EditIcon className="h-3 w-3 text-gray-400 hover:text-gray-600" />
                  </button>}
              </div>)}
            <button className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-50 rounded-lg" onClick={() => setIsAddTabModalOpen(true)}>
              <PlusIcon className="h-5 w-5" />
            </button>
          </div>
        </div>
      </div>
      <Modal isOpen={isAddTabModalOpen} onClose={() => {
      setIsAddTabModalOpen(false);
      setNewTabName('');
    }} title="新增Banner分类" footer={addTabModalFooter}>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            分类名称
          </label>
          <input type="text" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" value={newTabName} onChange={e => setNewTabName(e.target.value)} placeholder="请输入分类名称" />
        </div>
      </Modal>
      <Modal isOpen={isEditTabModalOpen} onClose={() => {
      setIsEditTabModalOpen(false);
      setNewTabName('');
      setEditingTab(null);
    }} title="编辑Banner分类" footer={editTabModalFooter}>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            分类名称
          </label>
          <input type="text" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" value={newTabName} onChange={e => setNewTabName(e.target.value)} placeholder="请输入分类名称" />
        </div>
      </Modal>
      <Modal isOpen={isAddModalOpen} onClose={() => setIsAddModalOpen(false)} title={isEditMode ? '编辑Banner' : '新增Banner'} footer={modalFooter}>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Banner图片
            </label>
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-4">
              <div className="aspect-[2/1] rounded overflow-hidden bg-gray-100">
                <img src={bannerForm.image} alt="Banner Preview" className="w-full h-full object-cover" />
              </div>
              <div className="mt-4 flex justify-center">
                <Button variant="outline" size="sm" icon={<ImageIcon className="h-4 w-4" />}>
                  上传图片
                </Button>
              </div>
            </div>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              跳转配置
            </label>
            <select className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" value={bannerForm.linkType} onChange={e => setBannerForm({
            ...bannerForm,
            linkType: e.target.value as 'none' | 'url' | 'activity'
          })}>
              <option value="none">无跳转</option>
              <option value="url">链接跳转</option>
              <option value="activity">关联活动</option>
            </select>
          </div>
          {bannerForm.linkType === 'url' && <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                跳转链接
              </label>
              <input type="text" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" value={bannerForm.link} onChange={e => setBannerForm({
            ...bannerForm,
            link: e.target.value
          })} placeholder="请输入完整的URL地址" />
            </div>}
          {bannerForm.linkType === 'activity' && <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                关联活动
              </label>
              <select className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" value={bannerForm.activityId || ''} onChange={e => setBannerForm({
            ...bannerForm,
            activityId: Number(e.target.value)
          })}>
                <option value="">请选择活动</option>
                <option value="1">好友邀请活动</option>
                {/* Add more activities as needed */}
              </select>
            </div>}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                开始时间
              </label>
              <input type="datetime-local" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" value={bannerForm.startTime} onChange={e => setBannerForm({
              ...bannerForm,
              startTime: e.target.value
            })} />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                结束时间
              </label>
              <input type="datetime-local" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" value={bannerForm.endTime} onChange={e => setBannerForm({
              ...bannerForm,
              endTime: e.target.value
            })} />
            </div>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              权重
            </label>
            <input type="number" min="1" max="100" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" value={bannerForm.weight} onChange={e => setBannerForm({
            ...bannerForm,
            weight: parseInt(e.target.value)
          })} />
            <p className="mt-1 text-xs text-gray-500">
              数值范围：1-100，数值越大排序越靠前
            </p>
          </div>
        </div>
      </Modal>
      <Modal isOpen={isDeleteModalOpen} onClose={() => {
      setIsDeleteModalOpen(false);
      setBannerToDelete(null);
    }} title="确认删除" footer={<>
            <Button variant="danger" className="ml-3" onClick={handleConfirmDelete}>
              确认删除
            </Button>
            <Button variant="outline" onClick={() => {
        setIsDeleteModalOpen(false);
        setBannerToDelete(null);
      }}>
              取消
            </Button>
          </>}>
        <div className="py-4">
          <p className="text-gray-700">
            确定要删除这个Banner吗？此操作无法撤销。
          </p>
        </div>
      </Modal>
      <Card>
        <Table<Banner> columns={columns} data={banners.filter(banner => banner.type === activeTab)} />
      </Card>
    </div>;
};
export default BannerManagement;
```

### src\pages\ContentDashboard.tsx
```tsx
import React, { useState } from 'react';
import Card from '../components/ui/Card';
import Button from '../components/ui/Button';
import Modal from '../components/ui/Modal';
import MessageSettings from '../components/message/MessageSettings';
import { BarChart2Icon, FileTextIcon, VideoIcon, ThumbsUpIcon, BookmarkIcon, EyeIcon, PlusIcon, EditIcon, TrashIcon, EyeOffIcon } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
interface Content {
  id: number;
  type: 'article' | 'video';
  title: string;
  author: string;
  createdAt: string;
  status: 'draft' | 'published';
  visibility: 'public' | 'private';
  views: number;
  likes: number;
  favorites: number;
  cover: string;
  description?: string;
  tags: string[];
}
const mockContents: Content[] = [{
  id: 1,
  type: 'article',
  title: '新手指南：如何快速升级',
  author: '灵兽官方账号',
  createdAt: '2024-01-15 10:30',
  status: 'published',
  visibility: 'public',
  views: 1234,
  likes: 89,
  favorites: 45,
  cover: 'https://placehold.co/600x400',
  tags: ['萌新入门', '快速升级']
}, {
  id: 2,
  type: 'video',
  title: '宠物养成攻略视频',
  author: '灵兽攻略站',
  createdAt: '2024-01-14 15:20',
  status: 'draft',
  visibility: 'private',
  views: 0,
  likes: 0,
  favorites: 0,
  cover: 'https://placehold.co/600x400',
  description: '详细讲解宠物养成技巧，包括喂养、培养和进化等系统...',
  tags: ['灵兽百科', '伙伴养成']
}];
interface StatsData {
  articles: number;
  videos: number;
  views: number;
  likes: number;
  favorites: number;
}
const initialStats: StatsData = {
  articles: 128,
  videos: 45,
  views: 25431,
  likes: 12567,
  favorites: 8934
};
const ContentDashboard: React.FC = () => {
  const [contents, setContents] = useState<Content[]>(mockContents);
  const [stats] = useState<StatsData>(initialStats);
  const [selectedContent, setSelectedContent] = useState<Content | null>(null);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false);
  const navigate = useNavigate();
  const handleVisibilityToggle = (id: number) => {
    setContents(contents.map(content => content.id === id ? {
      ...content,
      visibility: content.visibility === 'public' ? 'private' : 'public'
    } : content));
  };
  const handleDelete = (id: number) => {
    setContents(contents.filter(content => content.id !== id));
  };
  const handlePublish = (id: number) => {
    setContents(contents.map(content => content.id === id ? {
      ...content,
      status: 'published'
    } : content));
  };
  const handleStatsEdit = (content: Content) => {
    setSelectedContent(content);
    setIsStatsModalOpen(true);
  };
  const handleEdit = (content: Content) => {
    setSelectedContent(content);
    setIsEditModalOpen(true);
  };
  return <div>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-800">内容管理</h1>
        <div className="flex space-x-2">
          <Button variant="primary" icon={<FileTextIcon className="h-4 w-4" />} onClick={() => navigate('/content-dashboard/article/new')}>
            写文章
          </Button>
          <Button variant="primary" icon={<VideoIcon className="h-4 w-4" />} onClick={() => navigate('/content-dashboard/video/new')}>
            发视频
          </Button>
        </div>
      </div>
      <div className="space-y-6">
        <Card title="内容数据概览">
          <div className="grid grid-cols-1 md:grid-cols-5 gap-6">
            <div className="bg-blue-50 rounded-lg p-4">
              <h3 className="text-blue-600 font-medium mb-2">文章总数</h3>
              <p className="text-2xl font-bold text-blue-900">
                {stats.articles}
              </p>
            </div>
            <div className="bg-green-50 rounded-lg p-4">
              <h3 className="text-green-600 font-medium mb-2">视频总数</h3>
              <p className="text-2xl font-bold text-green-900">
                {stats.videos}
              </p>
            </div>
            <div className="bg-purple-50 rounded-lg p-4">
              <h3 className="text-purple-600 font-medium mb-2">总浏览量</h3>
              <p className="text-2xl font-bold text-purple-900">
                {stats.views.toLocaleString()}
              </p>
            </div>
            <div className="bg-red-50 rounded-lg p-4">
              <h3 className="text-red-600 font-medium mb-2">总点赞量</h3>
              <p className="text-2xl font-bold text-red-900">
                {stats.likes.toLocaleString()}
              </p>
            </div>
            <div className="bg-yellow-50 rounded-lg p-4">
              <h3 className="text-yellow-600 font-medium mb-2">总收藏量</h3>
              <p className="text-2xl font-bold text-yellow-900">
                {stats.favorites.toLocaleString()}
              </p>
            </div>
          </div>
        </Card>
        <Card title="已发布内容">
          <div className="space-y-4">
            {contents.map(content => <div key={content.id} className="flex items-start justify-between p-4 border rounded-lg">
                <div className="flex space-x-4">
                  <div className="w-24 h-16 bg-gray-100 rounded overflow-hidden flex-shrink-0">
                    <img src={content.cover} alt={content.title} className="w-full h-full object-cover" />
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center space-x-2">
                      <span className={`px-2 py-0.5 text-xs rounded-full ${content.status === 'draft' ? 'bg-yellow-100 text-yellow-800' : 'bg-green-100 text-green-800'}`}>
                        {content.status === 'draft' ? '草稿' : '已发布'}
                      </span>
                      <span className={`px-2 py-0.5 text-xs rounded-full ${content.visibility === 'private' ? 'bg-gray-100 text-gray-800' : 'bg-blue-100 text-blue-800'}`}>
                        {content.visibility === 'private' ? '仅自己可见' : '公开'}
                      </span>
                      <span className="text-xs text-gray-500">
                        {content.type === 'article' ? '文章' : '视频'}
                      </span>
                    </div>
                    <h4 className="font-medium mt-1">{content.title}</h4>
                    <div className="flex items-center space-x-4 mt-2 text-sm text-gray-500">
                      <span>{content.author}</span>
                      <span>{content.createdAt}</span>
                      <div className="flex items-center space-x-2">
                        <EyeIcon className="h-4 w-4" />
                        <span>{content.views}</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <ThumbsUpIcon className="h-4 w-4" />
                        <span>{content.likes}</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <BookmarkIcon className="h-4 w-4" />
                        <span>{content.favorites}</span>
                      </div>
                    </div>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  <Button variant="outline" size="sm" icon={<EditIcon className="h-4 w-4" />} onClick={() => handleStatsEdit(content)}>
                    数据
                  </Button>
                  <Button variant="outline" size="sm" icon={<EditIcon className="h-4 w-4" />} onClick={() => handleEdit(content)}>
                    编辑
                  </Button>
                  <Button variant="outline" size="sm" icon={content.visibility === 'public' ? <EyeOffIcon className="h-4 w-4" /> : <EyeIcon className="h-4 w-4" />} onClick={() => handleVisibilityToggle(content.id)}>
                    {content.visibility === 'public' ? '设为私密' : '公开'}
                  </Button>
                  {content.status === 'draft' && <Button variant="primary" size="sm" onClick={() => handlePublish(content.id)}>
                      发布
                    </Button>}
                  <Button variant="danger" size="sm" icon={<TrashIcon className="h-4 w-4" />} onClick={() => handleDelete(content.id)}>
                    删除
                  </Button>
                </div>
              </div>)}
          </div>
        </Card>
      </div>
      <Modal isOpen={isStatsModalOpen} onClose={() => setIsStatsModalOpen(false)} title="编辑数据统计" footer={<>
            <Button variant="primary">保存</Button>
            <Button variant="outline" onClick={() => setIsStatsModalOpen(false)}>
              取消
            </Button>
          </>}>
        {selectedContent && <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                浏览量
              </label>
              <input type="number" className="w-full px-3 py-2 border rounded-md" value={selectedContent.views} />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                点赞数
              </label>
              <input type="number" className="w-full px-3 py-2 border rounded-md" value={selectedContent.likes} />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                收藏数
              </label>
              <input type="number" className="w-full px-3 py-2 border rounded-md" value={selectedContent.favorites} />
            </div>
          </div>}
      </Modal>
      <Modal isOpen={isEditModalOpen} onClose={() => setIsEditModalOpen(false)} title="编辑内容">
        <div className="space-y-6">
          <MessageSettings moduleType="content" title="内容更新提醒设置" />
        </div>
      </Modal>
    </div>;
};
export default ContentDashboard;
```

### src\pages\ContentEditor.tsx
```tsx
import React, { useState } from 'react';
import Card from '../components/ui/Card';
import Button from '../components/ui/Button';
import { BoldIcon, ItalicIcon, UnderlineIcon, ListIcon, ImageIcon, AlignLeftIcon, AlignCenterIcon, AlignRightIcon, Calendar, ClockIcon } from 'lucide-react';
const ContentEditor: React.FC = () => {
  const [title, setTitle] = useState('');
  const [scheduledPublish, setScheduledPublish] = useState(false);
  return <div>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-800">文章编辑</h1>
        <div className="flex space-x-2">
          <Button variant="outline">保存草稿</Button>
          <Button variant="primary">发布文章</Button>
        </div>
      </div>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2">
          <Card>
            <div className="mb-6">
              <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-1">
                文章标题
              </label>
              <input type="text" id="title" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="输入文章标题..." value={title} onChange={e => setTitle(e.target.value)} />
            </div>
            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                文章内容
              </label>
              <div className="border border-gray-300 rounded-md overflow-hidden">
                <div className="bg-gray-50 border-b border-gray-300 p-2 flex items-center space-x-1">
                  <button className="p-1 hover:bg-gray-200 rounded">
                    <BoldIcon className="h-4 w-4" />
                  </button>
                  <button className="p-1 hover:bg-gray-200 rounded">
                    <ItalicIcon className="h-4 w-4" />
                  </button>
                  <button className="p-1 hover:bg-gray-200 rounded">
                    <UnderlineIcon className="h-4 w-4" />
                  </button>
                  <div className="h-4 border-r border-gray-300 mx-1"></div>
                  <button className="p-1 hover:bg-gray-200 rounded">
                    <ListIcon className="h-4 w-4" />
                  </button>
                  <button className="p-1 hover:bg-gray-200 rounded">
                    <ImageIcon className="h-4 w-4" />
                  </button>
                  <div className="h-4 border-r border-gray-300 mx-1"></div>
                  <button className="p-1 hover:bg-gray-200 rounded">
                    <AlignLeftIcon className="h-4 w-4" />
                  </button>
                  <button className="p-1 hover:bg-gray-200 rounded">
                    <AlignCenterIcon className="h-4 w-4" />
                  </button>
                  <button className="p-1 hover:bg-gray-200 rounded">
                    <AlignRightIcon className="h-4 w-4" />
                  </button>
                </div>
                <textarea className="w-full p-3 min-h-[400px] focus:outline-none" placeholder="开始编写文章内容..."></textarea>
              </div>
            </div>
          </Card>
        </div>
        <div className="space-y-6">
          <Card title="发布设置">
            <div className="space-y-4">
              <div>
                <label className="flex items-center">
                  <input type="checkbox" className="h-4 w-4 text-blue-600 rounded" checked={scheduledPublish} onChange={() => setScheduledPublish(!scheduledPublish)} />
                  <span className="ml-2 text-sm text-gray-700">定时发布</span>
                </label>
              </div>
              {scheduledPublish && <div className="grid grid-cols-2 gap-3">
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">
                      日期
                    </label>
                    <div className="relative">
                      <input type="date" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 pr-10" />
                      <Calendar className="h-4 w-4 text-gray-400 absolute top-1/2 right-3 transform -translate-y-1/2" />
                    </div>
                  </div>
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">
                      时间
                    </label>
                    <div className="relative">
                      <input type="time" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 pr-10" />
                      <ClockIcon className="h-4 w-4 text-gray-400 absolute top-1/2 right-3 transform -translate-y-1/2" />
                    </div>
                  </div>
                </div>}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  可见范围
                </label>
                <select className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                  <option value="public">公开</option>
                  <option value="private">仅自己可见</option>
                </select>
              </div>
            </div>
          </Card>
          <Card title="文章设置">
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  作者
                </label>
                <select className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                  <option value="official">灵兽官方账号</option>
                  <option value="activity">灵兽活动发布</option>
                  <option value="guide">灵兽攻略站</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  标签
                </label>
                <select className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 mb-2">
                  <option value="">选择一级标签</option>
                  <option value="1">萌新入门</option>
                  <option value="5">灵兽百科</option>
                  <option value="8">社交指南</option>
                  <option value="11">版本活动</option>
                </select>
                <select className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                  <option value="">选择二级标签</option>
                  <option value="2">快速升级</option>
                  <option value="3">赚钱秘籍</option>
                  <option value="4">伙伴养成</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  封面图
                </label>
                <div className="border-2 border-dashed border-gray-300 rounded-md p-6 flex flex-col items-center">
                  <ImageIcon className="h-8 w-8 text-gray-400 mb-2" />
                  <p className="text-sm text-gray-500 mb-1">点击上传封面图</p>
                  <p className="text-xs text-gray-400">或从文章首图自动提取</p>
                  <input type="file" className="hidden" />
                </div>
              </div>
            </div>
          </Card>
        </div>
      </div>
    </div>;
};
export default ContentEditor;
```

### src\pages\DailySignIn.tsx
```tsx
import React, { useState, createElement } from 'react';
import Card from '../components/ui/Card';
import Button from '../components/ui/Button';
import Modal from '../components/ui/Modal';
import MessageSettings from '../components/message/MessageSettings';
import { PlusIcon, CopyIcon, TrashIcon, ImageIcon, ChevronLeftIcon, ChevronRightIcon, UploadIcon, DownloadIcon } from 'lucide-react';
import { format, addMonths, subMonths } from 'date-fns';
interface Reward {
  id: number;
  icon: string;
  name: string;
  type: 'item' | 'currency';
  quantity: number;
  day: number;
}
interface RewardFormData {
  icon: string;
  name: string;
  type: 'item' | 'currency';
  quantity: number;
}
const mockRewards: Reward[] = [{
  id: 1,
  icon: 'https://placehold.co/32x32',
  name: '金币',
  type: 'currency',
  quantity: 100,
  day: 1
}, {
  id: 2,
  icon: 'https://placehold.co/32x32',
  name: '经验药水',
  type: 'item',
  quantity: 1,
  day: 2
}, {
  id: 3,
  icon: 'https://placehold.co/32x32',
  name: '钻石',
  type: 'currency',
  quantity: 50,
  day: 3
}];
const DailySignIn: React.FC = () => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [rewards, setRewards] = useState<Reward[]>(mockRewards);
  const [selectedDay, setSelectedDay] = useState<number | null>(null);
  const [isAddRewardModalOpen, setIsAddRewardModalOpen] = useState(false);
  const [rewardForm, setRewardForm] = useState<RewardFormData>({
    icon: 'https://placehold.co/32x32',
    name: '',
    type: 'currency',
    quantity: 1
  });
  const handlePreviousMonth = () => setCurrentDate(subMonths(currentDate, 1));
  const handleNextMonth = () => setCurrentDate(addMonths(currentDate, 1));
  const handleCopyLastMonth = () => {
    alert('复制上月模板');
  };
  const handleDeleteReward = (id: number) => {
    setRewards(rewards.filter(reward => reward.id !== id));
  };
  const getDaysInMonth = () => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const days = new Date(year, month + 1, 0).getDate();
    return Array.from({
      length: days
    }, (_, i) => i + 1);
  };
  const handleAddReward = () => {
    if (selectedDay) {
      const newReward: Reward = {
        id: Math.max(...rewards.map(r => r.id)) + 1,
        ...rewardForm,
        day: selectedDay
      };
      setRewards([...rewards, newReward]);
      setIsAddRewardModalOpen(false);
      setRewardForm({
        icon: 'https://placehold.co/32x32',
        name: '',
        type: 'currency',
        quantity: 1
      });
    }
  };
  const handleBulkUpload = () => {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.csv,.xlsx';
    input.onchange = e => {
      const file = (e.target as HTMLInputElement).files?.[0];
      if (file) {
        console.log('Uploading file:', file.name);
      }
    };
    input.click();
  };
  const handleBulkExport = () => {
    console.log('Exporting rewards data');
  };
  const rewardModalFooter = <>
      <Button variant="primary" className="ml-3" onClick={handleAddReward} disabled={!rewardForm.name}>
        确认
      </Button>
      <Button variant="outline" onClick={() => setIsAddRewardModalOpen(false)}>
        取消
      </Button>
    </>;
  return <div>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-800">每日签到管理</h1>
        <div className="flex space-x-2">
          <Button variant="outline" icon={<UploadIcon className="h-4 w-4" />} onClick={handleBulkUpload}>
            批量导入
          </Button>
          <Button variant="outline" icon={<CopyIcon className="h-4 w-4" />} onClick={handleCopyLastMonth}>
            复制上月模板
          </Button>
        </div>
      </div>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2">
          <Card title="日历配置">
            <div className="mb-4 flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <button className="p-2 hover:bg-gray-100 rounded-full" onClick={handlePreviousMonth}>
                  <ChevronLeftIcon className="h-5 w-5" />
                </button>
                <span className="text-lg font-medium">
                  {format(currentDate, 'yyyy年MM月')}
                </span>
                <button className="p-2 hover:bg-gray-100 rounded-full" onClick={handleNextMonth}>
                  <ChevronRightIcon className="h-5 w-5" />
                </button>
              </div>
            </div>
            <div className="grid grid-cols-7 gap-2">
              {['日', '一', '二', '三', '四', '五', '六'].map(day => <div key={day} className="text-center py-2 text-sm font-medium text-gray-500">
                  {day}
                </div>)}
              {getDaysInMonth().map(day => {
              const hasReward = rewards.some(reward => reward.day === day);
              return <button key={day} onClick={() => setSelectedDay(day)} className={`
                      aspect-square p-2 rounded-lg border text-sm
                      ${selectedDay === day ? 'border-blue-500 bg-blue-50' : 'border-gray-200'}
                      ${hasReward ? 'bg-green-50' : ''}
                      hover:border-blue-500 transition-colors
                    `}>
                    <div className="font-medium">{day}</div>
                    {hasReward && <div className="text-xs text-green-600 mt-1">已配置</div>}
                  </button>;
            })}
            </div>
          </Card>
        </div>
        <div className="space-y-6">
          <Card title="奖励配置">
            <div className="space-y-4">
              {selectedDay ? <>
                  <div className="p-4 bg-blue-50 rounded-lg">
                    <div className="font-medium text-blue-800">
                      {format(currentDate, 'yyyy年MM月')}
                      {selectedDay}日
                    </div>
                  </div>
                  <div className="space-y-4">
                    {rewards.filter(reward => reward.day === selectedDay).map(reward => <div key={reward.id} className="flex items-center justify-between p-3 border border-gray-200 rounded-lg">
                          <div className="flex items-center space-x-3">
                            <div className="w-8 h-8 bg-gray-100 rounded flex items-center justify-center">
                              <img src={reward.icon} alt={reward.name} className="w-6 h-6" />
                            </div>
                            <div>
                              <div className="font-medium">{reward.name}</div>
                              <div className="text-sm text-gray-500">
                                {reward.type === 'currency' ? '货币' : '道具'} x{' '}
                                {reward.quantity}
                              </div>
                            </div>
                          </div>
                          <Button variant="danger" size="sm" icon={<TrashIcon className="h-4 w-4" />} onClick={() => handleDeleteReward(reward.id)}>
                            删除
                          </Button>
                        </div>)}
                    <Button variant="outline" className="w-full" icon={<PlusIcon className="h-4 w-4" />}>
                      添加奖励
                    </Button>
                  </div>
                </> : <div className="text-center py-8 text-gray-500">
                  请选择日期配置奖励
                </div>}
            </div>
          </Card>
          <MessageSettings moduleType="sign_in" title="签到提醒设置" />
        </div>
      </div>
      <Modal isOpen={isAddRewardModalOpen} onClose={() => setIsAddRewardModalOpen(false)} title="添加奖励" footer={rewardModalFooter}>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              奖励图标
            </label>
            <div className="flex items-center space-x-4">
              <div className="w-12 h-12 bg-gray-100 rounded flex items-center justify-center">
                <img src={rewardForm.icon} alt="" className="w-8 h-8" />
              </div>
              <Button variant="outline" size="sm">
                上传图标
              </Button>
            </div>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              奖励名称
            </label>
            <input type="text" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" value={rewardForm.name} onChange={e => setRewardForm({
            ...rewardForm,
            name: e.target.value
          })} />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              奖励类型
            </label>
            <select className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" value={rewardForm.type} onChange={e => setRewardForm({
            ...rewardForm,
            type: e.target.value as 'item' | 'currency'
          })}>
              <option value="currency">货币</option>
              <option value="item">道具</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              数量
            </label>
            <input type="number" min="1" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" value={rewardForm.quantity} onChange={e => setRewardForm({
            ...rewardForm,
            quantity: parseInt(e.target.value)
          })} />
          </div>
        </div>
      </Modal>
    </div>;
};
export default DailySignIn;
```

### src\pages\Dashboard.tsx
```tsx
import React from 'react';
import Card from '../components/ui/Card';
import { BarChart2Icon, UsersIcon, CalendarIcon, ZapIcon, TagIcon, BellIcon } from 'lucide-react';
const StatCard: React.FC<{
  title: string;
  value: string;
  icon: React.ReactNode;
  color: string;
}> = ({
  title,
  value,
  icon,
  color
}) => {
  return <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
      <div className="flex items-center">
        <div className={`rounded-full p-3 ${color}`}>{icon}</div>
        <div className="ml-5">
          <p className="text-sm font-medium text-gray-500">{title}</p>
          <p className="text-2xl font-semibold mt-1">{value}</p>
        </div>
      </div>
    </div>;
};
const Dashboard: React.FC = () => {
  return <div>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-800">仪表盘</h1>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6">
        <StatCard title="用户总数" value="12,345" icon={<UsersIcon className="h-6 w-6 text-blue-500" />} color="bg-blue-100" />
        <StatCard title="今日签到" value="1,234" icon={<CalendarIcon className="h-6 w-6 text-green-500" />} color="bg-green-100" />
        <StatCard title="活动参与" value="5,678" icon={<ZapIcon className="h-6 w-6 text-purple-500" />} color="bg-purple-100" />
        <StatCard title="内容总数" value="890" icon={<TagIcon className="h-6 w-6 text-yellow-500" />} color="bg-yellow-100" />
        <StatCard title="消息发送" value="4,567" icon={<BellIcon className="h-6 w-6 text-red-500" />} color="bg-red-100" />
        <StatCard title="系统健康度" value="98%" icon={<BarChart2Icon className="h-6 w-6 text-indigo-500" />} color="bg-indigo-100" />
      </div>
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card title="模块使用情况">
          <div className="h-80 flex items-center justify-center text-gray-500">
            图表占位 - 各模块使用频率统计
          </div>
        </Card>
        <Card title="最近活动">
          <div className="space-y-4">
            {[1, 2, 3, 4, 5].map(i => <div key={i} className="flex items-center pb-4 border-b border-gray-100 last:border-0">
                <div className="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center mr-4">
                  <UsersIcon className="h-5 w-5 text-blue-500" />
                </div>
                <div>
                  <p className="text-sm font-medium">管理员更新了Banner配置</p>
                  <p className="text-xs text-gray-500 mt-1">2小时前</p>
                </div>
              </div>)}
          </div>
        </Card>
      </div>
    </div>;
};
export default Dashboard;
```

### src\pages\MessageFactory.tsx
```tsx
import React, { useState } from 'react';
import Card from '../components/ui/Card';
import Button from '../components/ui/Button';
import Modal from '../components/ui/Modal';
import { PlusIcon, EditIcon, TrashIcon, PlayIcon, PauseIcon, ChevronDownIcon, AlertCircleIcon, CheckCircleIcon } from 'lucide-react';
interface Template {
  id: number;
  name: string;
  status: 'active' | 'pending' | 'rejected';
  category: string;
  templateId: string;
  code: string;
  content: string;
  parameters: {
    key: string;
    name: string;
  }[];
  stats?: {
    subscribers: number;
    pushTasks: {
      total: number;
      success: number;
      failed: number;
    };
  };
  boundActivity?: {
    title: string;
    status: 'active' | 'upcoming' | 'ended';
    startTime: string;
    endTime: string;
  };
}
const statusLabels = {
  active: {
    label: '已启用',
    color: 'bg-green-100 text-green-800'
  },
  pending: {
    label: '审核中',
    color: 'bg-yellow-100 text-yellow-800'
  },
  rejected: {
    label: '已驳回',
    color: 'bg-red-100 text-red-800'
  }
};
const categoryLabels: {
  [key: string]: string;
} = {
  activity: '活动通知',
  sign_in: '签到提醒',
  content: '内容更新'
};
const mockTemplates: Template[] = [{
  id: 1,
  name: '活动开始提醒',
  status: 'active',
  category: 'activity',
  templateId: 'TPL_001',
  code: 'ACT_START',
  content: '亲爱的${user}，${activityName}活动即将开始，记得来参加哦！',
  parameters: [{
    key: 'user',
    name: '用户名'
  }, {
    key: 'activityName',
    name: '活动名称'
  }],
  stats: {
    subscribers: 12345,
    pushTasks: {
      total: 10000,
      success: 9800,
      failed: 200
    }
  },
  boundActivity: {
    title: '新春活动',
    status: 'upcoming',
    startTime: '2024-02-10',
    endTime: '2024-02-24'
  }
}, {
  id: 2,
  name: '签到奖励提醒',
  status: 'pending',
  category: 'sign_in',
  templateId: 'TPL_002',
  code: 'SIGN_REWARD',
  content: '亲爱的${user}，今日签到奖励${reward}等你来领取！',
  parameters: [{
    key: 'user',
    name: '用户名'
  }, {
    key: 'reward',
    name: '奖励内容'
  }],
  stats: {
    subscribers: 8765,
    pushTasks: {
      total: 5000,
      success: 4950,
      failed: 50
    }
  }
}];
const renderTemplateContent = (template: Template) => <div className="space-y-4">
    <div className="flex items-center space-x-2">
      <h3 className="font-medium text-gray-900">{template.name}</h3>
      <span className={`px-2 py-0.5 text-xs rounded-full ${statusLabels[template.status].color}`}>
        {statusLabels[template.status].label}
      </span>
      <span className="text-sm text-gray-500">
        {categoryLabels[template.category]}
      </span>
    </div>
    <div className="flex items-center space-x-4 text-sm text-gray-500">
      <span>模板ID: {template.templateId}</span>
      <span>编号: {template.code}</span>
    </div>
    <div className="mt-2 bg-gray-50 rounded p-3 text-sm">
      <div className="font-medium text-gray-700 mb-1">模板内容:</div>
      <div className="text-gray-600 whitespace-pre-line">
        {template.content}
      </div>
    </div>
    <div className="flex items-center space-x-4 text-sm">
      {template.parameters.map(param => <span key={param.key} className="px-2 py-1 bg-blue-50 text-blue-700 rounded text-xs">
          {param.name}
        </span>)}
    </div>
    {template.boundActivity && <div className="mt-2 border-t pt-4">
        <div className="flex items-center space-x-2">
          <span className="text-sm font-medium text-gray-700">关联活动：</span>
          <span className="text-sm text-gray-600">
            {template.boundActivity.title}
          </span>
          <span className={`
              px-2 py-0.5 rounded-full text-xs
              ${template.boundActivity.status === 'active' ? 'bg-green-100 text-green-800' : template.boundActivity.status === 'upcoming' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'}
            `}>
            {template.boundActivity.status === 'active' ? '进行中' : template.boundActivity.status === 'upcoming' ? '未开始' : '已结束'}
          </span>
        </div>
        <div className="text-xs text-gray-500 mt-1">
          活动时间：{template.boundActivity.startTime} 至{' '}
          {template.boundActivity.endTime}
        </div>
        {template.stats && template.status === 'active' && template.category === 'activity' && template.boundActivity.status === 'active' && <div className="grid grid-cols-2 gap-4 mt-4 pt-4 border-t">
              <div>
                <div className="text-sm font-medium text-gray-700">
                  预约人数
                </div>
                <div className="mt-1 text-2xl font-semibold text-blue-600">
                  {template.stats.subscribers.toLocaleString()}
                </div>
              </div>
              <div>
                <div className="text-sm font-medium text-gray-700">
                  推送人数
                </div>
                <div className="text-xl font-medium text-gray-900 mt-1">
                  {template.stats.pushTasks.total.toLocaleString()}
                </div>
              </div>
            </div>}
      </div>}
  </div>;
const MessageFactory: React.FC = () => {
  const [templates, setTemplates] = useState<Template[]>(mockTemplates);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const filteredTemplates = selectedCategory === 'all' ? templates : templates.filter(template => template.category === selectedCategory);
  return <div>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-800">订阅消息工厂</h1>
        <Button variant="primary" icon={<PlusIcon className="h-4 w-4" />} onClick={() => setIsAddModalOpen(true)}>
          新增模板
        </Button>
      </div>
      <div className="mb-6">
        <div className="flex space-x-2">
          <Button variant={selectedCategory === 'all' ? 'primary' : 'outline'} onClick={() => setSelectedCategory('all')}>
            全部
          </Button>
          {Object.entries(categoryLabels).map(([key, label]) => <Button key={key} variant={selectedCategory === key ? 'primary' : 'outline'} onClick={() => setSelectedCategory(key)}>
              {label}
            </Button>)}
        </div>
      </div>
      <div className="space-y-4">
        {filteredTemplates.map(template => <Card key={template.id}>
            <div className="flex justify-between">
              <div className="flex-1">{renderTemplateContent(template)}</div>
              <div className="flex items-start space-x-2 ml-4">
                <Button variant="outline" size="sm" icon={<EditIcon className="h-4 w-4" />}>
                  编辑
                </Button>
                {template.status === 'active' ? <Button variant="outline" size="sm" icon={<PauseIcon className="h-4 w-4" />}>
                    停用
                  </Button> : <Button variant="outline" size="sm" icon={<PlayIcon className="h-4 w-4" />}>
                    启用
                  </Button>}
                <Button variant="danger" size="sm" icon={<TrashIcon className="h-4 w-4" />}>
                  删除
                </Button>
              </div>
            </div>
          </Card>)}
      </div>
    </div>;
};
export default MessageFactory;
```

### src\pages\Permissions.tsx
```tsx
import React, { useState } from 'react';
import Card from '../components/ui/Card';
import Button from '../components/ui/Button';
import Table from '../components/ui/Table';
import { PlusIcon, TrashIcon } from 'lucide-react';
interface User {
  id: number;
  account: string;
  createdAt: string;
}
const mockUsers: User[] = [{
  id: 1,
  account: 'admin',
  createdAt: '2023-01-01 10:00:00'
}, {
  id: 2,
  account: 'editor',
  createdAt: '2023-01-02 11:30:00'
}, {
  id: 3,
  account: 'viewer',
  createdAt: '2023-01-03 09:15:00'
}, {
  id: 4,
  account: 'marketing',
  createdAt: '2023-01-04 14:20:00'
}, {
  id: 5,
  account: 'support',
  createdAt: '2023-01-05 16:45:00'
}];
const Permissions: React.FC = () => {
  const [users] = useState<User[]>(mockUsers);
  const [selectedRows, setSelectedRows] = useState<number[]>([]);
  const [allSelected, setAllSelected] = useState(false);
  const handleSelectRow = (id: number) => {
    if (selectedRows.includes(id)) {
      setSelectedRows(selectedRows.filter(rowId => rowId !== id));
      setAllSelected(false);
    } else {
      setSelectedRows([...selectedRows, id]);
      if (selectedRows.length + 1 === users.length) {
        setAllSelected(true);
      }
    }
  };
  const handleSelectAll = () => {
    if (allSelected) {
      setSelectedRows([]);
      setAllSelected(false);
    } else {
      setSelectedRows(users.map(user => user.id));
      setAllSelected(true);
    }
  };
  const columns = [{
    header: 'ID',
    accessor: 'id',
    width: 'w-1/12'
  }, {
    header: '账号',
    accessor: 'account',
    width: 'w-5/12'
  }, {
    header: '创建时间',
    accessor: 'createdAt',
    width: 'w-6/12'
  }];
  return <div>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-800">权限管理</h1>
        <div className="flex space-x-2">
          <Button variant="primary" icon={<PlusIcon className="h-4 w-4" />}>
            新增账号
          </Button>
          <Button variant="danger" icon={<TrashIcon className="h-4 w-4" />} disabled={selectedRows.length === 0}>
            删除账号
          </Button>
        </div>
      </div>
      <Card>
        <Table<User> columns={columns} data={users} selectedRows={selectedRows} onSelectRow={handleSelectRow} onSelectAll={handleSelectAll} allSelected={allSelected} />
      </Card>
    </div>;
};
export default Permissions;
```

### src\pages\TagManagement.tsx
```tsx
import React, { useState } from 'react';
import Card from '../components/ui/Card';
import Button from '../components/ui/Button';
import Modal from '../components/ui/Modal';
import { PlusIcon } from 'lucide-react';
interface Tag {
  id: number;
  name: string;
  parentId: number | null;
  postCount: number;
}
interface TagFormData {
  name: string;
  parentId?: number | null;
}
const mockTags: Tag[] = [{
  id: 1,
  name: '萌新入门',
  parentId: null,
  postCount: 45
}, {
  id: 2,
  name: '快速升级',
  parentId: 1,
  postCount: 12
}, {
  id: 3,
  name: '赚钱秘籍',
  parentId: 1,
  postCount: 18
}, {
  id: 4,
  name: '伙伴养成',
  parentId: 1,
  postCount: 15
}, {
  id: 5,
  name: '灵兽百科',
  parentId: null,
  postCount: 32
}, {
  id: 6,
  name: '赚钱秘籍',
  parentId: 5,
  postCount: 10
}, {
  id: 7,
  name: '伙伴养成',
  parentId: 5,
  postCount: 22
}, {
  id: 8,
  name: '社交指南',
  parentId: null,
  postCount: 28
}, {
  id: 9,
  name: '赚钱秘籍',
  parentId: 8,
  postCount: 8
}, {
  id: 10,
  name: '伙伴养成',
  parentId: 8,
  postCount: 20
}, {
  id: 11,
  name: '版本活动',
  parentId: null,
  postCount: 36
}, {
  id: 12,
  name: '赚钱秘籍',
  parentId: 11,
  postCount: 14
}, {
  id: 13,
  name: '伙伴养成',
  parentId: 11,
  postCount: 22
}];
const TagManagement: React.FC = () => {
  const [tags, setTags] = useState<Tag[]>(mockTags);
  const [isAddPrimaryModalOpen, setIsAddPrimaryModalOpen] = useState(false);
  const [isAddSecondaryModalOpen, setIsAddSecondaryModalOpen] = useState(false);
  const [selectedParentId, setSelectedParentId] = useState<number | null>(null);
  const [tagForm, setTagForm] = useState<TagFormData>({
    name: ''
  });
  const primaryTags = tags.filter(tag => tag.parentId === null);
  const handleAddPrimaryTag = () => {
    if (tagForm.name.trim()) {
      const newTag: Tag = {
        id: Math.max(...tags.map(t => t.id)) + 1,
        name: tagForm.name,
        parentId: null,
        postCount: 0
      };
      setTags([...tags, newTag]);
      setTagForm({
        name: ''
      });
      setIsAddPrimaryModalOpen(false);
    }
  };
  const handleAddSecondaryTag = () => {
    if (tagForm.name.trim() && selectedParentId) {
      const newTag: Tag = {
        id: Math.max(...tags.map(t => t.id)) + 1,
        name: tagForm.name,
        parentId: selectedParentId,
        postCount: 0
      };
      setTags([...tags, newTag]);
      setTagForm({
        name: ''
      });
      setIsAddSecondaryModalOpen(false);
    }
  };
  const primaryModalFooter = <>
      <Button variant="primary" className="ml-3" onClick={handleAddPrimaryTag} disabled={!tagForm.name.trim()}>
        确认
      </Button>
      <Button variant="outline" onClick={() => setIsAddPrimaryModalOpen(false)}>
        取消
      </Button>
    </>;
  const secondaryModalFooter = <>
      <Button variant="primary" className="ml-3" onClick={handleAddSecondaryTag} disabled={!tagForm.name.trim()}>
        确认
      </Button>
      <Button variant="outline" onClick={() => setIsAddSecondaryModalOpen(false)}>
        取消
      </Button>
    </>;
  return <div>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-800">标签管理</h1>
        <Button variant="primary" icon={<PlusIcon className="h-4 w-4" />} onClick={() => setIsAddPrimaryModalOpen(true)}>
          新增一级标签
        </Button>
      </div>
      <div className="grid grid-cols-1 gap-6">
        {primaryTags.map(primaryTag => {
        const secondaryTags = tags.filter(tag => tag.parentId === primaryTag.id);
        return <Card key={primaryTag.id} className="border-l-4 border-l-blue-500">
              <div className="flex justify-between items-center mb-4">
                <div>
                  <h3 className="text-lg font-medium text-gray-800">
                    {primaryTag.name}
                  </h3>
                  <p className="text-sm text-gray-500">
                    关联文章: {primaryTag.postCount}
                  </p>
                </div>
                <div className="flex space-x-2">
                  <Button variant="outline" size="sm">
                    编辑
                  </Button>
                  <Button variant="danger" size="sm">
                    删除
                  </Button>
                </div>
              </div>
              <div className="bg-gray-50 rounded-lg p-4">
                <div className="flex justify-between items-center mb-3">
                  <h4 className="text-sm font-medium text-gray-600">
                    二级标签
                  </h4>
                  <Button variant="outline" size="sm" icon={<PlusIcon className="h-4 w-4" />} onClick={() => {
                setSelectedParentId(primaryTag.id);
                setIsAddSecondaryModalOpen(true);
              }}>
                    新增二级标签
                  </Button>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {secondaryTags.map(secondaryTag => <div key={secondaryTag.id} className="bg-white p-3 rounded border border-gray-200 flex justify-between items-center">
                      <div>
                        <p className="font-medium">{secondaryTag.name}</p>
                        <p className="text-xs text-gray-500">
                          关联文章: {secondaryTag.postCount}
                        </p>
                      </div>
                      <div className="flex space-x-1">
                        <button className="text-gray-500 hover:text-blue-500 p-1">
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                          </svg>
                        </button>
                        <button className="text-gray-500 hover:text-red-500 p-1">
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                          </svg>
                        </button>
                      </div>
                    </div>)}
                </div>
              </div>
            </Card>;
      })}
      </div>
      <Modal isOpen={isAddPrimaryModalOpen} onClose={() => setIsAddPrimaryModalOpen(false)} title="新增一级标签" footer={primaryModalFooter}>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            标签名称
          </label>
          <input type="text" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" value={tagForm.name} onChange={e => setTagForm({
          name: e.target.value
        })} placeholder="请输入标签名称" />
        </div>
      </Modal>
      <Modal isOpen={isAddSecondaryModalOpen} onClose={() => setIsAddSecondaryModalOpen(false)} title="新增二级标签" footer={secondaryModalFooter}>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            标签名称
          </label>
          <input type="text" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" value={tagForm.name} onChange={e => setTagForm({
          name: e.target.value
        })} placeholder="请输入标签名称" />
        </div>
      </Modal>
    </div>;
};
export default TagManagement;
```

### src\pages\VideoPublisher.tsx
```tsx
import React, { useState, useRef, createElement } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import Card from '../components/ui/Card';
import Button from '../components/ui/Button';
import { ChevronLeftIcon, ImageIcon, UploadIcon, Calendar, ClockIcon } from 'lucide-react';
interface VideoFormData {
  title: string;
  author: string;
  description: string;
  video: File | null;
  coverImage: string | null;
  primaryTag: string;
  secondaryTag: string;
  visibility: 'public' | 'private';
  scheduledPublish: boolean;
  publishDate: string;
  publishTime: string;
}
const MAX_DESCRIPTION_LENGTH = 200;
const VIDEO_TYPES = ['video/mp4', 'video/webm', 'video/ogg'];
const IMAGE_TYPES = ['image/jpeg', 'image/png', 'image/webp'];
const VideoPublisher: React.FC = () => {
  const navigate = useNavigate();
  const {
    id
  } = useParams();
  const videoRef = useRef<HTMLVideoElement>(null);
  const [videoPreviewUrl, setVideoPreviewUrl] = useState<string>('');
  const [showCoverOptions, setShowCoverOptions] = useState(false);
  const [formData, setFormData] = useState<VideoFormData>({
    title: '',
    author: 'official',
    description: '',
    video: null,
    coverImage: null,
    primaryTag: '',
    secondaryTag: '',
    visibility: 'public',
    scheduledPublish: false,
    publishDate: '',
    publishTime: ''
  });
  const handleVideoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file && VIDEO_TYPES.includes(file.type)) {
      setFormData({
        ...formData,
        video: file
      });
      setVideoPreviewUrl(URL.createObjectURL(file));
    } else {
      alert('请上传有效的视频文件');
    }
  };
  const handleCoverImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file && IMAGE_TYPES.includes(file.type)) {
      const imageUrl = URL.createObjectURL(file);
      setFormData({
        ...formData,
        coverImage: imageUrl
      });
    } else {
      alert('请上传有效的图片文件');
    }
  };
  const captureVideoFrame = () => {
    const video = videoRef.current;
    if (video) {
      const canvas = document.createElement('canvas');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      canvas.getContext('2d')?.drawImage(video, 0, 0, canvas.width, canvas.height);
      const imageUrl = canvas.toDataURL('image/jpeg');
      setFormData({
        ...formData,
        coverImage: imageUrl
      });
    }
  };
  const handleSaveDraft = () => {
    console.log('Saving draft:', formData);
  };
  const handlePublish = () => {
    console.log('Publishing:', formData);
  };
  return <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center">
          <Button variant="outline" size="sm" icon={<ChevronLeftIcon className="h-4 w-4" />} onClick={() => navigate('/content-dashboard')}>
            返回
          </Button>
          <h1 className="text-2xl font-bold text-gray-800 ml-4">
            {id ? '编辑视频' : '发布视频'}
          </h1>
        </div>
        <div className="flex space-x-2">
          <Button variant="outline" onClick={handleSaveDraft}>
            保存草稿
          </Button>
          <Button variant="primary" onClick={handlePublish}>
            发布视频
          </Button>
        </div>
      </div>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-6">
          <Card>
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  视频标题
                </label>
                <input type="text" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" value={formData.title} onChange={e => setFormData({
                ...formData,
                title: e.target.value
              })} placeholder="请输入视频标题..." />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  上传视频
                </label>
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-6">
                  {videoPreviewUrl ? <div className="space-y-4">
                      <video ref={videoRef} src={videoPreviewUrl} controls className="w-full rounded-lg" />
                      <Button variant="outline" icon={<UploadIcon className="h-4 w-4" />} onClick={() => {
                    setVideoPreviewUrl('');
                    setFormData({
                      ...formData,
                      video: null
                    });
                  }}>
                        重新上传
                      </Button>
                    </div> : <div>
                      <input type="file" id="video-upload" className="hidden" accept="video/*" onChange={handleVideoUpload} />
                      <label htmlFor="video-upload" className="flex flex-col items-center cursor-pointer">
                        <UploadIcon className="h-8 w-8 text-gray-400 mb-2" />
                        <p className="text-sm text-gray-500">点击上传视频</p>
                        <p className="text-xs text-gray-400 mt-1">
                          支持 MP4、WebM、Ogg 格式
                        </p>
                      </label>
                    </div>}
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  视频文案
                </label>
                <div className="relative">
                  <textarea className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" rows={5} maxLength={MAX_DESCRIPTION_LENGTH} value={formData.description} onChange={e => setFormData({
                  ...formData,
                  description: e.target.value
                })} placeholder="请输入视频文案描述..." />
                  <div className="absolute bottom-2 right-2 text-sm text-gray-500">
                    {formData.description.length}/{MAX_DESCRIPTION_LENGTH}
                  </div>
                </div>
              </div>
            </div>
          </Card>
        </div>
        <div className="space-y-6">
          <Card title="发布设置">
            <div className="space-y-4">
              <div>
                <label className="flex items-center">
                  <input type="checkbox" className="h-4 w-4 text-blue-600 rounded" checked={formData.scheduledPublish} onChange={e => setFormData({
                  ...formData,
                  scheduledPublish: e.target.checked
                })} />
                  <span className="ml-2 text-sm text-gray-700">定时发布</span>
                </label>
              </div>
              {formData.scheduledPublish && <div className="grid grid-cols-2 gap-3">
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">
                      日期
                    </label>
                    <div className="relative">
                      <input type="date" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" value={formData.publishDate} onChange={e => setFormData({
                    ...formData,
                    publishDate: e.target.value
                  })} />
                      <Calendar className="h-4 w-4 text-gray-400 absolute top-1/2 right-3 transform -translate-y-1/2" />
                    </div>
                  </div>
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">
                      时间
                    </label>
                    <div className="relative">
                      <input type="time" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" value={formData.publishTime} onChange={e => setFormData({
                    ...formData,
                    publishTime: e.target.value
                  })} />
                      <ClockIcon className="h-4 w-4 text-gray-400 absolute top-1/2 right-3 transform -translate-y-1/2" />
                    </div>
                  </div>
                </div>}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  可见范围
                </label>
                <select className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" value={formData.visibility} onChange={e => setFormData({
                ...formData,
                visibility: e.target.value as 'public' | 'private'
              })}>
                  <option value="public">公开</option>
                  <option value="private">仅自己可见</option>
                </select>
              </div>
            </div>
          </Card>
          <Card title="视频设置">
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  作者
                </label>
                <select className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" value={formData.author} onChange={e => setFormData({
                ...formData,
                author: e.target.value
              })}>
                  <option value="official">灵兽官方账号</option>
                  <option value="activity">灵兽活动发布</option>
                  <option value="guide">灵兽攻略站</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  标签
                </label>
                <select className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 mb-2" value={formData.primaryTag} onChange={e => setFormData({
                ...formData,
                primaryTag: e.target.value
              })}>
                  <option value="">选择一级标签</option>
                  <option value="1">萌新入门</option>
                  <option value="5">灵兽百科</option>
                  <option value="8">社交指南</option>
                  <option value="11">版本活动</option>
                </select>
                <select className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" value={formData.secondaryTag} onChange={e => setFormData({
                ...formData,
                secondaryTag: e.target.value
              })}>
                  <option value="">选择二级标签</option>
                  <option value="2">快速升级</option>
                  <option value="3">赚钱秘籍</option>
                  <option value="4">伙伴养成</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  封面图
                </label>
                {formData.coverImage ? <div className="space-y-2">
                    <img src={formData.coverImage} alt="Cover" className="w-full h-32 object-cover rounded-lg" />
                    <Button variant="outline" size="sm" className="w-full" onClick={() => setShowCoverOptions(true)}>
                      更换封面
                    </Button>
                  </div> : <div className="space-y-4">
                    <div className="border-2 border-dashed border-gray-300 rounded-md p-6 flex flex-col items-center">
                      <ImageIcon className="h-8 w-8 text-gray-400 mb-2" />
                      <p className="text-sm text-gray-500 mb-1">选择封面方式</p>
                      <div className="flex space-x-2 mt-4">
                        <Button variant="outline" size="sm" onClick={() => {
                      const input = document.createElement('input');
                      input.type = 'file';
                      input.accept = 'image/*';
                      input.onchange = e => {
                        const target = e.target as HTMLInputElement;
                        if (target.files) {
                          handleCoverImageUpload({
                            target
                          } as React.ChangeEvent<HTMLInputElement>);
                        }
                      };
                      input.click();
                    }}>
                          上传图片
                        </Button>
                        {videoPreviewUrl && <Button variant="outline" size="sm" onClick={captureVideoFrame}>
                            从视频截图
                          </Button>}
                      </div>
                    </div>
                  </div>}
              </div>
            </div>
          </Card>
        </div>
      </div>
    </div>;
};
export default VideoPublisher;
```

### tailwind.config.js
```javascript
export default {content: [
  './index.html',
  './src/**/*.{js,ts,jsx,tsx}'
],}
```

### tsconfig.json
```json
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}

```

### tsconfig.node.json
```json
{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true,
    "strict": true
  },
  "include": ["vite.config.ts"]
}

```

### vite.config.ts
```typescript
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})

```
"""